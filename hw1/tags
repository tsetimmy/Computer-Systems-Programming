!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABSOLUTE	SRC/vpr_types.h	/^{ ABSOLUTE, FRACTIONAL };$/;"	e	enum:e_Fc_type
ABS_DIFF	SRC/mst.c	7;"	d	file:
ABS_DIFF	SRC/place_stats.c	7;"	d	file:
ALLOW_SWITCH_OFF	SRC/rr_graph2.c	10;"	d	file:
ALL_NETS	SRC/draw.c	/^{ ALL_NETS, HIGHLIGHTED };$/;"	e	enum:e_draw_net_type	file:
AUTO_SCHED	SRC/vpr_types.h	/^{ AUTO_SCHED, USER_SCHED };	\/* Annealing schedule *\/$/;"	e	enum:sched_type
ArchFile	SRC/ReadOptions.h	/^    char *ArchFile;$/;"	m	struct:s_options
Aspect	SRC/xml_arch.h	/^    float Aspect;$/;"	m	struct:s_clb_grid
BISQUE	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
BI_DIRECTION	SRC/vpr_types.h	/^    BI_DIRECTION = 2$/;"	e	enum:e_direction
BI_DIRECTIONAL	SRC/vpr_types.h	/^{ UNI_DIRECTIONAL, BI_DIRECTIONAL };	\/* UDSD by AY *\/$/;"	e	enum:e_directionality
BLACK	SRC/graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
BLOCK_COUNT	SRC/timing_place_lookup.c	47;"	d	file:
BLUE	SRC/graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
BOTTOM	SRC/vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
BOUNDARY	SRC/vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
BOUNDING_BOX_PLACE	SRC/vpr_types.h	/^{ BOUNDING_BOX_PLACE, NET_TIMING_DRIVEN_PLACE,$/;"	e	enum:e_place_algorithm
BREADTH_FIRST	SRC/vpr_types.h	/^{ BREADTH_FIRST, TIMING_DRIVEN, DIRECTED_SEARCH };$/;"	e	enum:e_router_algorithm
BUFSIZE	SRC/util.h	29;"	d
BUF_AND_PTRANS_FLAG	SRC/check_rr_graph.c	12;"	d	file:
BUF_FLAG	SRC/check_rr_graph.c	10;"	d	file:
BUTTON_TEXT_LEN	SRC/graphics.c	92;"	d	file:
C	SRC/vpr_types.h	/^    float C;$/;"	m	struct:s_rr_node
CC	Makefile	/^CC = gcc$/;"	m
CHANX	SRC/vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
CHANX_COST_INDEX_START	SRC/vpr_types.h	/^    IPIN_COST_INDEX, CHANX_COST_INDEX_START$/;"	e	enum:e_cost_indices
CHANY	SRC/vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
CHECK	SRC/place.c	/^{ NORMAL, CHECK };$/;"	e	enum:cost_methods	file:
CHECK_RAND	SRC/util.c	837;"	d	file:
CHUNK_SIZE	SRC/util.c	218;"	d	file:
COL_REL	SRC/vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
COL_REPEAT	SRC/vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
CONSTANT_GEN_SOURCE	SRC/path_delay2.h	/^    CONSTANT_GEN_SOURCE$/;"	e	enum:__anon8
CORAL	SRC/graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
CYAN	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
C_downstream	SRC/net_delay.c	/^    float C_downstream;$/;"	m	struct:s_rc_node	file:
C_downstream	SRC/route_tree_timing.h	/^    float C_downstream;$/;"	m	struct:s_rt_node
C_ipin_cblock	SRC/vpr_types.h	/^    float C_ipin_cblock;$/;"	m	struct:s_timing_inf
C_ipin_cblock	SRC/xml_arch.h	/^     float C_ipin_cblock;$/;"	m	struct:s_arch
C_load	SRC/vpr_types.h	/^    float C_load;$/;"	m	struct:s_rr_indexed_data
Chans	SRC/xml_arch.h	/^    t_chan_width_dist Chans;$/;"	m	struct:s_arch
CheckArch	SRC/CheckArch.c	/^CheckArch(IN t_arch Arch,$/;"	f
CheckElement	SRC/xml_arch.c	/^CheckElement(IN ezxml_t Node,$/;"	f	file:
CheckGrid	SRC/SetupVPR.c	/^CheckGrid()$/;"	f	file:
CheckOptions	SRC/CheckOptions.c	/^CheckOptions(IN t_options Options,$/;"	f
CheckSegments	SRC/CheckArch.c	/^static void CheckSegments(IN t_arch Arch) {$/;"	f	file:
CheckSetup	SRC/CheckSetup.c	/^CheckSetup(IN enum e_operation Operation,$/;"	f
CheckSwitches	SRC/CheckArch.c	/^CheckSwitches(IN t_arch Arch,$/;"	f	file:
Cin	SRC/vpr_types.h	/^    float Cin;$/;"	m	struct:s_switch_inf
Cmetal	SRC/vpr_types.h	/^    float Cmetal;$/;"	m	struct:s_seg_details
Cmetal	SRC/vpr_types.h	/^    float Cmetal;$/;"	m	struct:s_segment_inf
Count	SRC/ReadOptions.h	/^    int Count[OT_BASE_UNKNOWN];$/;"	m	struct:s_options
CountChildren	SRC/xml_arch.c	/^CountChildren(IN ezxml_t Node,$/;"	f	file:
CountTokens	SRC/ReadLine.c	/^CountTokens(IN char **Tokens)$/;"	f
CountTokensInString	SRC/xml_arch.c	/^CountTokensInString(IN const char *Str,$/;"	f	file:
Cout	SRC/vpr_types.h	/^    float Cout;$/;"	m	struct:s_switch_inf
DARKGREEN	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
DARKGREY	SRC/graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
DARKKHAKI	SRC/graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
DARKSLATEBLUE	SRC/graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
DASHED	SRC/graphics.h	/^{ SOLID, DASHED };$/;"	e	enum:line_types
DEBUG	SRC/vpr_types.h	2;"	d
DEBUG_FLAGS	Makefile	/^DEBUG_FLAGS = -g $/;"	m
DEBUG_TIMING_PLACE_LOOKUP	SRC/timing_place_lookup.c	56;"	d	file:
DEC_DIRECTION	SRC/vpr_types.h	/^    DEC_DIRECTION = 1,$/;"	e	enum:e_direction
DELAY_NORMALIZED	SRC/vpr_types.h	/^{ INTRINSIC_DELAY, DELAY_NORMALIZED, DEMAND_ONLY };$/;"	e	enum:e_base_cost_type
DELTA	SRC/vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
DEMAND_ONLY	SRC/vpr_types.h	/^{ INTRINSIC_DELAY, DELAY_NORMALIZED, DEMAND_ONLY };$/;"	e	enum:e_base_cost_type
DETAILED	SRC/vpr_types.h	/^{ GLOBAL, DETAILED };$/;"	e	enum:e_route_type
DIRECTED_SEARCH	SRC/vpr_types.h	/^{ BREADTH_FIRST, TIMING_DRIVEN, DIRECTED_SEARCH };$/;"	e	enum:e_router_algorithm
DRAW_ALL_BUT_BUFFERS_RR	SRC/draw.c	/^    DRAW_ALL_BUT_BUFFERS_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_ALL_RR	SRC/draw.c	/^    DRAW_ALL_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_NODES_AND_SBOX_RR	SRC/draw.c	/^    DRAW_NODES_AND_SBOX_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_NODES_RR	SRC/draw.c	/^    DRAW_NODES_RR,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_NO_RR	SRC/draw.c	/^    DRAW_NO_RR = 0,$/;"	e	enum:e_draw_rr_toggle	file:
DRAW_RR_TOGGLE_MAX	SRC/draw.c	/^    DRAW_RR_TOGGLE_MAX$/;"	e	enum:e_draw_rr_toggle	file:
DRIVER	SRC/vpr_types.h	/^{ OPEN = -1, DRIVER = 0, RECEIVER = 1 };$/;"	e	enum:e_pin_type
DUMPFILE	SRC/timing_place_lookup.c	58;"	d	file:
EMPTY	SRC/vpr_types.h	43;"	d
EMPTY_TYPE	SRC/main.c	/^t_type_ptr EMPTY_TYPE = NULL;$/;"	v
EMPTY_TYPE_BACKUP	SRC/timing_place_lookup.c	/^static t_type_ptr EMPTY_TYPE_BACKUP;$/;"	v	file:
EMPTY_TYPE_INDEX	SRC/xml_arch.c	12;"	d	file:
ENABLE_REVERSE	SRC/rr_graph2.c	15;"	d	file:
ERROR_TOL	SRC/place.c	37;"	d	file:
ERROR_TOL	SRC/route_timing.c	766;"	d	file:
ERRTAG	SRC/util.h	26;"	d
EXE	Makefile	/^EXE = vpr$/;"	m
EZXML_BUFSIZE	SRC/ezxml.h	38;"	d
EZXML_DUP	SRC/ezxml.h	41;"	d
EZXML_ERRL	SRC/ezxml.c	65;"	d	file:
EZXML_NAMEM	SRC/ezxml.h	39;"	d
EZXML_NIL	SRC/ezxml.c	/^char *EZXML_NIL[] = { NULL };	\/* empty, null terminated array of strings *\/$/;"	v
EZXML_NOMMAP	SRC/ezxml.c	30;"	d	file:
EZXML_TXTM	SRC/ezxml.h	40;"	d
EZXML_WS	SRC/ezxml.c	64;"	d	file:
EchoArch	SRC/xml_arch.c	/^EchoArch(IN const char *EchoFile,$/;"	f
Enum	SRC/vpr_types.h	/^    int Enum;$/;"	m	struct:s_TokenPair
Error	SRC/ReadOptions.c	/^Error(IN const char *Token)$/;"	f	file:
ErrorOption	SRC/ReadOptions.c	/^ErrorOption(IN const char *Option)$/;"	f	file:
FALSE	SRC/util.h	/^{ FALSE, TRUE }$/;"	e	enum:__anon4
FB_IPIN	SRC/path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FB_OPIN	SRC/path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FC_ABS	SRC/xml_arch.c	/^{ FC_ABS, FC_FRAC, FC_FULL };$/;"	e	enum:Fc_type	file:
FC_FRAC	SRC/xml_arch.c	/^{ FC_ABS, FC_FRAC, FC_FULL };$/;"	e	enum:Fc_type	file:
FC_FULL	SRC/xml_arch.c	/^{ FC_ABS, FC_FRAC, FC_FULL };$/;"	e	enum:Fc_type	file:
FF_SINK	SRC/path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FF_SOURCE	SRC/path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
FILL	SRC/vpr_types.h	/^{ BOUNDARY = 0, FILL, COL_REPEAT, COL_REL };$/;"	e	enum:e_grid_loc_type
FILL_TYPE	SRC/main.c	/^t_type_ptr FILL_TYPE = NULL;$/;"	v
FILL_TYPE_BACKUP	SRC/timing_place_lookup.c	/^static t_type_ptr FILL_TYPE_BACKUP;$/;"	v	file:
FLAGS	Makefile	/^FLAGS = $(OPT_FLAGS) -D EZXML_NOMMAP$/;"	m
FRACTIONAL	SRC/vpr_types.h	/^{ ABSOLUTE, FRACTIONAL };$/;"	e	enum:e_Fc_type
FRAGMENT_THRESHOLD	SRC/util.c	219;"	d	file:
FREE	SRC/vpr_types.h	/^{ FREE, RANDOM, USER };$/;"	e	enum:e_pad_loc_type
FROM	SRC/place.c	33;"	d	file:
FROM_AND_TO	SRC/place.c	35;"	d	file:
FROM_X_TO_Y	SRC/draw.c	/^{ FROM_X_TO_Y, FROM_Y_TO_X };	\/* Chanx to chany or vice versa? *\/$/;"	e	enum:e_edge_dir	file:
FROM_Y_TO_X	SRC/draw.c	/^{ FROM_X_TO_Y, FROM_Y_TO_X };	\/* Chanx to chany or vice versa? *\/$/;"	e	enum:e_edge_dir	file:
FULL	SRC/vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
Fc_in	SRC/vpr_types.h	/^    float Fc_in;$/;"	m	struct:s_type_descriptor
Fc_out	SRC/vpr_types.h	/^    float Fc_out;$/;"	m	struct:s_type_descriptor
Fc_type	SRC/xml_arch.c	/^    enum Fc_type$/;"	g	file:
FindElement	SRC/xml_arch.c	/^FindElement(IN ezxml_t Parent,$/;"	f	file:
FindProperty	SRC/xml_arch.c	/^FindProperty(IN ezxml_t Parent,$/;"	f	file:
FreeNode	SRC/xml_arch.c	/^FreeNode(INOUT ezxml_t Node)$/;"	f	file:
FreeTokens	SRC/ReadLine.c	/^FreeTokens(INOUT char ***TokensPtr)$/;"	f
Fs	SRC/vpr_types.h	/^    int Fs;$/;"	m	struct:s_det_routing_arch
Fs	SRC/xml_arch.h	/^     int Fs;$/;"	m	struct:s_arch
Fs_seed	SRC/main.c	/^int Fs_seed = -1;$/;"	v
GAUSSIAN	SRC/vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
GLOBAL	SRC/vpr_types.h	/^{ GLOBAL, DETAILED };$/;"	e	enum:e_route_type
GRAPH_BIDIR	SRC/rr_graph.h	/^    GRAPH_BIDIR,		\/* Detailed bidirectional graph *\/$/;"	e	enum:e_graph_type
GRAPH_GLOBAL	SRC/rr_graph.h	/^    GRAPH_GLOBAL,		\/* One node per channel with wire capacity > 1 and full connectivity *\/$/;"	e	enum:e_graph_type
GRAPH_UNIDIR	SRC/rr_graph.h	/^    GRAPH_UNIDIR,		\/* Detailed unidir graph, untilable *\/$/;"	e	enum:e_graph_type
GRAPH_UNIDIR_TILEABLE	SRC/rr_graph.h	/^    GRAPH_UNIDIR_TILEABLE	\/* Detail unidir graph with wire groups multiples of 2*L *\/$/;"	e	enum:e_graph_type
GREEN	SRC/graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
GetNodeTokens	SRC/xml_arch.c	/^GetNodeTokens(IN ezxml_t Node)$/;"	f	file:
GraphPause	SRC/ReadOptions.h	/^	int GraphPause;$/;"	m	struct:s_options
H	Makefile	/^H = SRC\/util.h\\$/;"	m
H	SRC/xml_arch.h	/^     int H;$/;"	m	struct:s_clb_grid
HASHSIZE	SRC/hash.c	6;"	d	file:
HIGHLIGHTED	SRC/draw.c	/^{ ALL_NETS, HIGHLIGHTED };$/;"	e	enum:e_draw_net_type	file:
HUGE_FLOAT	SRC/vpr_types.h	35;"	d
IA	SRC/util.c	834;"	d	file:
IC	SRC/util.c	835;"	d	file:
IM	SRC/util.c	836;"	d	file:
IMPOSSIBLE	SRC/timing_place_lookup.h	1;"	d
IN	SRC/util.h	21;"	d
INC_DIRECTION	SRC/vpr_types.h	/^    INC_DIRECTION = 0,$/;"	e	enum:e_direction
INFINITE	SRC/place_and_route.h	1;"	d
INOUT	SRC/util.h	23;"	d
INPAD	SRC/read_netlist.c	/^{ NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
INPAD_OPIN	SRC/path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
INPAD_SOURCE	SRC/path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
INTRINSIC_DELAY	SRC/vpr_types.h	/^{ INTRINSIC_DELAY, DELAY_NORMALIZED, DEMAND_ONLY };$/;"	e	enum:e_base_cost_type
IO_TYPE	SRC/main.c	/^t_type_ptr IO_TYPE = NULL;$/;"	v
IO_TYPE_BACKUP	SRC/timing_place_lookup.c	/^static t_type_ptr IO_TYPE_BACKUP;$/;"	v	file:
IO_TYPE_INDEX	SRC/xml_arch.c	13;"	d	file:
IPIN	SRC/vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
IPIN_COST_INDEX	SRC/vpr_types.h	/^    IPIN_COST_INDEX, CHANX_COST_INDEX_START$/;"	e	enum:e_cost_indices
InitArch	SRC/SetupVPR.c	/^InitArch(IN t_arch Arch)$/;"	f	file:
IsAuto	SRC/xml_arch.h	/^    boolean IsAuto;$/;"	m	struct:s_clb_grid
IsTimingEnabled	SRC/SetupVPR.c	/^IsTimingEnabled(IN t_options Options)$/;"	f
IsWhitespace	SRC/xml_arch.c	/^IsWhitespace(char c)$/;"	f	file:
K	SRC/xml_arch.h	/^     int K;			\/* LUT size *\/$/;"	m	struct:s_arch
KHAKI	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
LEFT	SRC/vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
LIB	Makefile	/^LIB = -lm -lX11$/;"	m
LIB_DIR	Makefile	/^LIB_DIR = -L\/usr\/X11R6\/lib$/;"	m
LIGHTBLUE	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
LIGHTGREY	SRC/graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
LINEAR_CONG	SRC/vpr_types.h	/^{ LINEAR_CONG, NONLINEAR_CONG };$/;"	e	enum:place_c_types
LONGLINE	SRC/segment_stats.c	10;"	d	file:
MAGENTA	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
MAJOR	SRC/vpr_types.h	33;"	d
MAXPIXEL	SRC/graphics.c	157;"	d	file:
MAXPTS	SRC/graphics.h	13;"	d
MAX_BLOCK_COLOURS	SRC/draw.c	14;"	d	file:
MAX_CHANNEL_WIDTH	SRC/vpr_types.h	40;"	d
MAX_FONT_SIZE	SRC/graphics.c	89;"	d	file:
MAX_LEN	SRC/place_stats.c	9;"	d	file:
MAX_MOVES_BEFORE_RECOMPUTE	SRC/place.c	38;"	d	file:
MAX_SHORT	SRC/vpr_types.h	41;"	d
MAX_X	SRC/place_stats.c	8;"	d	file:
MEDIUMPURPLE	SRC/graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
MINOR	SRC/vpr_types.h	32;"	d
MINPIXEL	SRC/graphics.c	158;"	d	file:
MULTI_BUFFERED	SRC/vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
MULTI_MERGED	SRC/vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
MULTI_MUXED	SRC/vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
MUX_SIZE_DIST_DISPLAY	SRC/rr_graph.c	26;"	d	file:
MWIDTH	SRC/graphics.c	87;"	d	file:
N	SRC/xml_arch.h	/^    int N;			\/* Cluster size *\/$/;"	m	struct:s_arch
NCHUNK	SRC/route_common.c	1138;"	d	file:
NDEBUG	SRC/vpr_types.h	16;"	d
NET_COUNT	SRC/timing_place_lookup.c	36;"	d	file:
NET_TIMING_DRIVEN_PLACE	SRC/vpr_types.h	/^{ BOUNDING_BOX_PLACE, NET_TIMING_DRIVEN_PLACE,$/;"	e	enum:e_place_algorithm
NET_USED	SRC/timing_place_lookup.c	40;"	d	file:
NET_USED_SINK_BLOCK	SRC/timing_place_lookup.c	43;"	d	file:
NET_USED_SOURCE_BLOCK	SRC/timing_place_lookup.c	42;"	d	file:
NONLINEAR_CONG	SRC/vpr_types.h	/^{ LINEAR_CONG, NONLINEAR_CONG };$/;"	e	enum:place_c_types
NORMAL	SRC/place.c	/^{ NORMAL, CHECK };$/;"	e	enum:cost_methods	file:
NORMAL	SRC/read_netlist.c	/^{ NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
NOT_FOUND	SRC/place_and_route.h	2;"	d
NO_FIXED_CHANNEL_WIDTH	SRC/vpr_types.h	446;"	d
NO_GRAPHICS	SRC/vpr_types.h	15;"	d
NO_PICTURE	SRC/vpr_types.h	/^{ NO_PICTURE, PLACEMENT, ROUTING };	\/* What's on screen? *\/$/;"	e	enum:pic_type
NO_PREVIOUS	SRC/vpr_types.h	723;"	d
NO_ROUTE_THROUGHS	SRC/route_tree_timing.c	297;"	d	file:
NUM_COLOR	SRC/graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
NUM_RR_TYPES	SRC/vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
NUM_SUB_PIN_TYPES	SRC/path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
NUM_TYPES_USED	SRC/timing_place_lookup.c	54;"	d	file:
NetFile	SRC/ReadOptions.h	/^    char *NetFile;$/;"	m	struct:s_options
OBJ	Makefile	/^OBJ = OBJ\/main.o \\$/;"	m
OFF	SRC/graphics.c	1132;"	d	file:
ON	SRC/graphics.c	1133;"	d	file:
OPEN	SRC/vpr_types.h	/^{ OPEN = -1, DRIVER = 0, RECEIVER = 1 };$/;"	e	enum:e_pin_type
OPIN	SRC/vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
OPIN_COST_INDEX	SRC/vpr_types.h	/^{ SOURCE_COST_INDEX = 0, SINK_COST_INDEX, OPIN_COST_INDEX,$/;"	e	enum:e_cost_indices
OPT_FLAGS	Makefile	/^OPT_FLAGS = -O3$/;"	m
OT_ACC_FAC	SRC/OptionTokens.h	/^    OT_ACC_FAC,$/;"	e	enum:e_OptionBaseToken
OT_ALPHA_T	SRC/OptionTokens.h	/^    OT_ALPHA_T,$/;"	e	enum:e_OptionBaseToken
OT_ARG_UNKNOWN	SRC/OptionTokens.h	/^    OT_ARG_UNKNOWN		\/* Must be last since used for counting enum items *\/$/;"	e	enum:e_OptionArgToken
OT_ASTAR_FAC	SRC/OptionTokens.h	/^    OT_ASTAR_FAC,$/;"	e	enum:e_OptionBaseToken
OT_AUTO	SRC/OptionTokens.h	/^    OT_AUTO,$/;"	e	enum:e_OptionBaseToken
OT_BASE_COST_TYPE	SRC/OptionTokens.h	/^    OT_BASE_COST_TYPE,$/;"	e	enum:e_OptionBaseToken
OT_BASE_UNKNOWN	SRC/OptionTokens.h	/^    OT_BASE_UNKNOWN		\/* Must be last since used for counting enum items *\/$/;"	e	enum:e_OptionBaseToken
OT_BB_FACTOR	SRC/OptionTokens.h	/^    OT_BB_FACTOR,$/;"	e	enum:e_OptionBaseToken
OT_BEND_COST	SRC/OptionTokens.h	/^    OT_BEND_COST,$/;"	e	enum:e_OptionBaseToken
OT_BLOCK_DIST	SRC/OptionTokens.h	/^    OT_BLOCK_DIST,$/;"	e	enum:e_OptionBaseToken
OT_BOUNDING_BOX	SRC/OptionTokens.h	/^    OT_BOUNDING_BOX,$/;"	e	enum:e_OptionArgToken
OT_BREADTH_FIRST	SRC/OptionTokens.h	/^    OT_BREADTH_FIRST,$/;"	e	enum:e_OptionArgToken
OT_CRITICALITY_EXP	SRC/OptionTokens.h	/^    OT_CRITICALITY_EXP,$/;"	e	enum:e_OptionBaseToken
OT_DELAY_NORMALIZED	SRC/OptionTokens.h	/^	OT_DELAY_NORMALIZED,$/;"	e	enum:e_OptionArgToken
OT_DEMAND_ONLY	SRC/OptionTokens.h	/^	OT_DEMAND_ONLY,$/;"	e	enum:e_OptionArgToken
OT_DETAILED	SRC/OptionTokens.h	/^    OT_DETAILED,$/;"	e	enum:e_OptionArgToken
OT_DIRECTED_SEARCH	SRC/OptionTokens.h	/^    OT_DIRECTED_SEARCH,$/;"	e	enum:e_OptionArgToken
OT_ENABLE_TIMING_COMPUTATIONS	SRC/OptionTokens.h	/^    OT_ENABLE_TIMING_COMPUTATIONS,$/;"	e	enum:e_OptionBaseToken
OT_EXIT_T	SRC/OptionTokens.h	/^    OT_EXIT_T,$/;"	e	enum:e_OptionBaseToken
OT_FAST	SRC/OptionTokens.h	/^    OT_FAST,$/;"	e	enum:e_OptionBaseToken
OT_FIRST_ITER_PRES_FAC	SRC/OptionTokens.h	/^    OT_FIRST_ITER_PRES_FAC,$/;"	e	enum:e_OptionBaseToken
OT_FIX_PINS	SRC/OptionTokens.h	/^    OT_FIX_PINS,$/;"	e	enum:e_OptionBaseToken
OT_FULL_STATS	SRC/OptionTokens.h	/^    OT_FULL_STATS,$/;"	e	enum:e_OptionBaseToken
OT_GLOBAL	SRC/OptionTokens.h	/^    OT_GLOBAL,$/;"	e	enum:e_OptionArgToken
OT_INITIAL_PRES_FAC	SRC/OptionTokens.h	/^    OT_INITIAL_PRES_FAC,$/;"	e	enum:e_OptionBaseToken
OT_INIT_T	SRC/OptionTokens.h	/^    OT_INIT_T,$/;"	e	enum:e_OptionBaseToken
OT_INNER_LOOP_RECOMPUTE_DIVIDER	SRC/OptionTokens.h	/^    OT_INNER_LOOP_RECOMPUTE_DIVIDER,$/;"	e	enum:e_OptionBaseToken
OT_INNER_NUM	SRC/OptionTokens.h	/^    OT_INNER_NUM,$/;"	e	enum:e_OptionBaseToken
OT_INTRINSIC_DELAY	SRC/OptionTokens.h	/^	OT_INTRINSIC_DELAY,$/;"	e	enum:e_OptionArgToken
OT_LINEAR	SRC/OptionTokens.h	/^    OT_LINEAR,$/;"	e	enum:e_OptionArgToken
OT_MAX_CRITICALITY	SRC/OptionTokens.h	/^    OT_MAX_CRITICALITY,$/;"	e	enum:e_OptionBaseToken
OT_MAX_ROUTER_ITERATIONS	SRC/OptionTokens.h	/^    OT_MAX_ROUTER_ITERATIONS,$/;"	e	enum:e_OptionBaseToken
OT_NET_TIMING_DRIVEN	SRC/OptionTokens.h	/^    OT_NET_TIMING_DRIVEN,$/;"	e	enum:e_OptionArgToken
OT_NODISP	SRC/OptionTokens.h	/^    OT_NODISP,$/;"	e	enum:e_OptionBaseToken
OT_NONLINEAR	SRC/OptionTokens.h	/^    OT_NONLINEAR,$/;"	e	enum:e_OptionArgToken
OT_NUM_REGIONS	SRC/OptionTokens.h	/^    OT_NUM_REGIONS,$/;"	e	enum:e_OptionBaseToken
OT_OFF	SRC/OptionTokens.h	/^    OT_OFF,$/;"	e	enum:e_OptionArgToken
OT_ON	SRC/OptionTokens.h	/^    OT_ON,$/;"	e	enum:e_OptionArgToken
OT_OUTFILE_PREFIX	SRC/OptionTokens.h	/^    OT_OUTFILE_PREFIX,$/;"	e	enum:e_OptionBaseToken
OT_PATH_TIMING_DRIVEN	SRC/OptionTokens.h	/^    OT_PATH_TIMING_DRIVEN,$/;"	e	enum:e_OptionArgToken
OT_PLACE_ALGORITHM	SRC/OptionTokens.h	/^    OT_PLACE_ALGORITHM,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_CHAN_WIDTH	SRC/OptionTokens.h	/^    OT_PLACE_CHAN_WIDTH,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_COST_EXP	SRC/OptionTokens.h	/^    OT_PLACE_COST_EXP,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_COST_TYPE	SRC/OptionTokens.h	/^    OT_PLACE_COST_TYPE,$/;"	e	enum:e_OptionBaseToken
OT_PLACE_ONLY	SRC/OptionTokens.h	/^    OT_PLACE_ONLY,$/;"	e	enum:e_OptionBaseToken
OT_PRES_FAC_MULT	SRC/OptionTokens.h	/^    OT_PRES_FAC_MULT,$/;"	e	enum:e_OptionBaseToken
OT_RANDOM	SRC/OptionTokens.h	/^    OT_RANDOM,$/;"	e	enum:e_OptionArgToken
OT_READ_PLACE_ONLY	SRC/OptionTokens.h	/^    OT_READ_PLACE_ONLY,$/;"	e	enum:e_OptionBaseToken
OT_RECOMPUTE_CRIT_ITER	SRC/OptionTokens.h	/^    OT_RECOMPUTE_CRIT_ITER,$/;"	e	enum:e_OptionBaseToken
OT_ROUTER_ALGORITHM	SRC/OptionTokens.h	/^    OT_ROUTER_ALGORITHM,$/;"	e	enum:e_OptionBaseToken
OT_ROUTE_CHAN_WIDTH	SRC/OptionTokens.h	/^    OT_ROUTE_CHAN_WIDTH,$/;"	e	enum:e_OptionBaseToken
OT_ROUTE_ONLY	SRC/OptionTokens.h	/^    OT_ROUTE_ONLY,$/;"	e	enum:e_OptionBaseToken
OT_ROUTE_TYPE	SRC/OptionTokens.h	/^    OT_ROUTE_TYPE,$/;"	e	enum:e_OptionBaseToken
OT_SEED	SRC/OptionTokens.h	/^    OT_SEED,$/;"	e	enum:e_OptionBaseToken
OT_TD_PLACE_EXP_FIRST	SRC/OptionTokens.h	/^    OT_TD_PLACE_EXP_FIRST,$/;"	e	enum:e_OptionBaseToken
OT_TD_PLACE_EXP_LAST	SRC/OptionTokens.h	/^    OT_TD_PLACE_EXP_LAST,$/;"	e	enum:e_OptionBaseToken
OT_TIMING_ANALYSIS	SRC/OptionTokens.h	/^    OT_TIMING_ANALYSIS,$/;"	e	enum:e_OptionBaseToken
OT_TIMING_ANALYZE_ONLY_WITH_NET_DELAY	SRC/OptionTokens.h	/^    OT_TIMING_ANALYZE_ONLY_WITH_NET_DELAY,$/;"	e	enum:e_OptionBaseToken
OT_TIMING_DRIVEN	SRC/OptionTokens.h	/^    OT_TIMING_DRIVEN,$/;"	e	enum:e_OptionArgToken
OT_TIMING_TRADEOFF	SRC/OptionTokens.h	/^    OT_TIMING_TRADEOFF,$/;"	e	enum:e_OptionBaseToken
OT_VERIFY_BINARY_SEARCH	SRC/OptionTokens.h	/^    OT_VERIFY_BINARY_SEARCH,$/;"	e	enum:e_OptionBaseToken
OUT	SRC/util.h	22;"	d
OUTPAD	SRC/read_netlist.c	/^{ NORMAL = 0, INPAD, OUTPAD };$/;"	e	enum:special_blk	file:
OUTPAD_IPIN	SRC/path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
OUTPAD_SINK	SRC/path_delay2.h	/^{ INPAD_SOURCE, INPAD_OPIN, OUTPAD_IPIN, OUTPAD_SINK,$/;"	e	enum:__anon8
OptionArgTokenList	SRC/OptionTokens.c	/^const struct s_TokenPair OptionArgTokenList[] = {$/;"	v	typeref:struct:s_TokenPair
OptionBaseTokenList	SRC/OptionTokens.c	/^const struct s_TokenPair OptionBaseTokenList[] = {$/;"	v	typeref:struct:s_TokenPair
OutFilePrefix	SRC/ReadOptions.h	/^    char *OutFilePrefix;$/;"	m	struct:s_options
OutFilePrefix	SRC/main.c	/^char *OutFilePrefix = NULL;$/;"	v
PATH_TIMING_DRIVEN_PLACE	SRC/vpr_types.h	/^    PATH_TIMING_DRIVEN_PLACE$/;"	e	enum:e_place_algorithm
PI	SRC/graphics.c	90;"	d	file:
PLACEMENT	SRC/vpr_types.h	/^{ NO_PICTURE, PLACEMENT, ROUTING };	\/* What's on screen? *\/$/;"	e	enum:pic_type
PLACE_ALWAYS	SRC/vpr_types.h	/^{ PLACE_NEVER, PLACE_ONCE, PLACE_ALWAYS };$/;"	e	enum:pfreq
PLACE_AND_ROUTE	SRC/vpr_types.h	/^{ PLACE_AND_ROUTE, PLACE_ONLY, ROUTE_ONLY,$/;"	e	enum:e_operation
PLACE_NEVER	SRC/vpr_types.h	/^{ PLACE_NEVER, PLACE_ONCE, PLACE_ALWAYS };$/;"	e	enum:pfreq
PLACE_ONCE	SRC/vpr_types.h	/^{ PLACE_NEVER, PLACE_ONCE, PLACE_ALWAYS };$/;"	e	enum:pfreq
PLACE_ONLY	SRC/vpr_types.h	/^{ PLACE_AND_ROUTE, PLACE_ONLY, ROUTE_ONLY,$/;"	e	enum:e_operation
PLUM	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
POSTSCRIPT	SRC/graphics.h	2;"	d
PROC_TIME	SRC/place_and_route.h	6;"	d
PTRANS_FLAG	SRC/check_rr_graph.c	11;"	d	file:
PULSE	SRC/vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
ParseFc	SRC/xml_arch.c	/^ParseFc(ezxml_t Node,$/;"	f	file:
PinFile	SRC/ReadOptions.h	/^    char *PinFile;$/;"	m	struct:s_options
PlaceAlgorithm	SRC/ReadOptions.h	/^    enum e_place_algorithm PlaceAlgorithm;$/;"	m	struct:s_options	typeref:enum:s_options::e_place_algorithm
PlaceAlphaT	SRC/ReadOptions.h	/^    float PlaceAlphaT;$/;"	m	struct:s_options
PlaceChanWidth	SRC/ReadOptions.h	/^    int PlaceChanWidth;$/;"	m	struct:s_options
PlaceCostType	SRC/ReadOptions.h	/^    enum place_c_types PlaceCostType;$/;"	m	struct:s_options	typeref:enum:s_options::place_c_types
PlaceExitT	SRC/ReadOptions.h	/^    float PlaceExitT;$/;"	m	struct:s_options
PlaceFile	SRC/ReadOptions.h	/^    char *PlaceFile;$/;"	m	struct:s_options
PlaceInitT	SRC/ReadOptions.h	/^    float PlaceInitT;$/;"	m	struct:s_options
PlaceInnerNum	SRC/ReadOptions.h	/^    float PlaceInnerNum;$/;"	m	struct:s_options
PlaceNonlinearRegions	SRC/ReadOptions.h	/^    int PlaceNonlinearRegions;$/;"	m	struct:s_options
PlaceTimingTradeoff	SRC/ReadOptions.h	/^	float PlaceTimingTradeoff;$/;"	m	struct:s_options
PrintTitle	SRC/main.c	/^PrintTitle()$/;"	f	file:
PrintUsage	SRC/main.c	/^PrintUsage()$/;"	f	file:
ProcessCB_SB	SRC/xml_arch.c	/^ProcessCB_SB(INOUT ezxml_t Node,$/;"	f	file:
ProcessChanWidthDistr	SRC/xml_arch.c	/^ProcessChanWidthDistr(INOUT ezxml_t Node,$/;"	f	file:
ProcessChanWidthDistrDir	SRC/xml_arch.c	/^ProcessChanWidthDistrDir(INOUT ezxml_t Node,$/;"	f	file:
ProcessDevice	SRC/xml_arch.c	/^ProcessDevice(INOUT ezxml_t Node,$/;"	f	file:
ProcessIO	SRC/xml_arch.c	/^ProcessIO(INOUT ezxml_t Node,$/;"	f	file:
ProcessLayout	SRC/xml_arch.c	/^ProcessLayout(INOUT ezxml_t Node,$/;"	f	file:
ProcessOption	SRC/ReadOptions.c	/^ProcessOption(IN const char *const *Args,$/;"	f	file:
ProcessSegments	SRC/xml_arch.c	/^ProcessSegments(INOUT ezxml_t Parent,$/;"	f	file:
ProcessSubblocks	SRC/xml_arch.c	/^ProcessSubblocks(INOUT ezxml_t Parent,$/;"	f	file:
ProcessSwitches	SRC/xml_arch.c	/^ProcessSwitches(INOUT ezxml_t Parent,$/;"	f	file:
ProcessTypeProps	SRC/xml_arch.c	/^ProcessTypeProps(ezxml_t Node,$/;"	f	file:
ProcessTypes	SRC/xml_arch.c	/^ProcessTypes(INOUT ezxml_t Node,$/;"	f	file:
Process_Fc	SRC/xml_arch.c	/^Process_Fc(ezxml_t Fc_in_node,$/;"	f	file:
R	SRC/vpr_types.h	/^    float R;$/;"	m	struct:s_rr_node
R	SRC/vpr_types.h	/^    float R;$/;"	m	struct:s_switch_inf
RANDOM	SRC/vpr_types.h	/^{ FREE, RANDOM, USER };$/;"	e	enum:e_pad_loc_type
RECEIVER	SRC/vpr_types.h	/^{ OPEN = -1, DRIVER = 0, RECEIVER = 1 };$/;"	e	enum:e_pin_type
RED	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
REVERSE_OPIN_ORDER	SRC/rr_graph.c	23;"	d	file:
RIGHT	SRC/vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
ROUND_UP	SRC/route_directed_search.c	537;"	d	file:
ROUND_UP	SRC/route_timing.c	612;"	d	file:
ROUTE_ONLY	SRC/vpr_types.h	/^{ PLACE_AND_ROUTE, PLACE_ONLY, ROUTE_ONLY,$/;"	e	enum:e_operation
ROUTING	SRC/vpr_types.h	/^{ NO_PICTURE, PLACEMENT, ROUTING };	\/* What's on screen? *\/$/;"	e	enum:pic_type
RR_GRAPH_NO_WARN	SRC/rr_graph.h	/^    RR_GRAPH_NO_WARN = 0x00,$/;"	e	enum:__anon3
RR_GRAPH_WARN_CHAN_WIDTH_CHANGED	SRC/rr_graph.h	/^    RR_GRAPH_WARN_CHAN_WIDTH_CHANGED = 0x02$/;"	e	enum:__anon3
RR_GRAPH_WARN_FC_CLIPPED	SRC/rr_graph.h	/^    RR_GRAPH_WARN_FC_CLIPPED = 0x01,$/;"	e	enum:__anon3
R_minW_nmos	SRC/vpr_types.h	/^    float R_minW_nmos;$/;"	m	struct:s_det_routing_arch
R_minW_nmos	SRC/xml_arch.h	/^     float R_minW_nmos;$/;"	m	struct:s_arch
R_minW_pmos	SRC/vpr_types.h	/^    float R_minW_pmos;$/;"	m	struct:s_det_routing_arch
R_minW_pmos	SRC/xml_arch.h	/^     float R_minW_pmos;$/;"	m	struct:s_arch
R_upstream	SRC/route_common.h	/^    float R_upstream;$/;"	m	struct:s_heap
R_upstream	SRC/route_tree_timing.h	/^    float R_upstream;$/;"	m	struct:s_rt_node
ReadBaseCostType	SRC/ReadOptions.c	/^ReadBaseCostType(IN const char *const *Args,$/;"	f	file:
ReadBaseToken	SRC/ReadOptions.c	/^ReadBaseToken(IN const char *const *Args,$/;"	f	file:
ReadFixPins	SRC/ReadOptions.c	/^ReadFixPins(IN const char *const *Args,$/;"	f	file:
ReadFixPins	SRC/temp.c	/^ReadFixPins(IN const char *const *Args,$/;"	f	file:
ReadFloat	SRC/ReadOptions.c	/^ReadFloat(IN const char *const *Args,$/;"	f	file:
ReadInt	SRC/ReadOptions.c	/^ReadInt(IN const char *const *Args,$/;"	f	file:
ReadLineTokens	SRC/ReadLine.c	/^ReadLineTokens(INOUT FILE * InFile,$/;"	f
ReadOnOff	SRC/ReadOptions.c	/^ReadOnOff(IN const char *const *Args,$/;"	f	file:
ReadOptions	SRC/ReadOptions.c	/^ReadOptions(IN int argc,$/;"	f
ReadPlaceAlgorithm	SRC/ReadOptions.c	/^ReadPlaceAlgorithm(IN const char *const *Args,$/;"	f	file:
ReadPlaceCostType	SRC/ReadOptions.c	/^ReadPlaceCostType(IN const char *const *Args,$/;"	f	file:
ReadRouteType	SRC/ReadOptions.c	/^ReadRouteType(IN const char *const *Args,$/;"	f	file:
ReadRouterAlgorithm	SRC/ReadOptions.c	/^ReadRouterAlgorithm(IN const char *const *Args,$/;"	f	file:
ReadString	SRC/ReadOptions.c	/^ReadString(IN const char *const *Args,$/;"	f	file:
ReadToken	SRC/ReadOptions.c	/^ReadToken(IN const char *const *Args,$/;"	f	file:
RecomputeCritIter	SRC/ReadOptions.h	/^	int RecomputeCritIter;$/;"	m	struct:s_options
Rmetal	SRC/vpr_types.h	/^    float Rmetal;$/;"	m	struct:s_seg_details
Rmetal	SRC/vpr_types.h	/^    float Rmetal;$/;"	m	struct:s_segment_inf
RouteChanWidth	SRC/ReadOptions.h	/^	int RouteChanWidth;$/;"	m	struct:s_options
RouteFile	SRC/ReadOptions.h	/^    char *RouteFile;$/;"	m	struct:s_options
RouteType	SRC/ReadOptions.h	/^    enum e_route_type RouteType;$/;"	m	struct:s_options	typeref:enum:s_options::e_route_type
RouterAlgorithm	SRC/ReadOptions.h	/^    enum e_router_algorithm RouterAlgorithm;$/;"	m	struct:s_options	typeref:enum:s_options::e_router_algorithm
SAME_TRACK	SRC/rr_graph2.c	18;"	d	file:
SBOX_ERROR	SRC/rr_graph_sbox.c	141;"	d	file:
SBType	SRC/xml_arch.h	/^     enum e_switch_block_type SBType;$/;"	m	struct:s_arch	typeref:enum:s_arch::e_switch_block_type
SCREEN	SRC/graphics.h	1;"	d
SINGLE	SRC/vpr_types.h	/^{ MULTI_BUFFERED, MULTI_MUXED, MULTI_MERGED, SINGLE };$/;"	e	enum:e_drivers
SINK	SRC/vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
SINK_BLOCK	SRC/timing_place_lookup.c	45;"	d	file:
SINK_COST_INDEX	SRC/vpr_types.h	/^{ SOURCE_COST_INDEX = 0, SINK_COST_INDEX, OPIN_COST_INDEX,$/;"	e	enum:e_cost_indices
SMALL_NET	SRC/place.c	21;"	d	file:
SOLID	SRC/graphics.h	/^{ SOLID, DASHED };$/;"	e	enum:line_types
SOURCE	SRC/vpr_types.h	/^{ SOURCE, SINK, IPIN, OPIN, CHANX, CHANY, NUM_RR_TYPES }$/;"	e	enum:e_rr_type
SOURCE_BLOCK	SRC/timing_place_lookup.c	44;"	d	file:
SOURCE_COST_INDEX	SRC/vpr_types.h	/^{ SOURCE_COST_INDEX = 0, SINK_COST_INDEX, OPIN_COST_INDEX,$/;"	e	enum:e_cost_indices
SRC_DIR	Makefile	/^SRC_DIR = SRC$/;"	m
SUBBLK_IPIN	SRC/path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
SUBBLK_OPIN	SRC/path_delay2.h	/^    FB_IPIN, FB_OPIN, SUBBLK_IPIN, SUBBLK_OPIN, FF_SINK, FF_SOURCE,$/;"	e	enum:__anon8
SUBSET	SRC/vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
SUB_CLOCK	SRC/path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
SUB_INPUT	SRC/path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
SUB_OUTPUT	SRC/path_delay.c	/^{ SUB_INPUT = 0, SUB_OUTPUT, SUB_CLOCK, NUM_SUB_PIN_TYPES };$/;"	e	enum:e_subblock_pin_type	file:
Seed	SRC/ReadOptions.h	/^    int Seed;$/;"	m	struct:s_options
Segments	SRC/xml_arch.h	/^     t_segment_inf * Segments;$/;"	m	struct:s_arch
SetupAnnealSched	SRC/SetupVPR.c	/^SetupAnnealSched(IN t_options Options,$/;"	f	file:
SetupClassInf	SRC/xml_arch.c	/^SetupClassInf(ezxml_t Classes,$/;"	f	file:
SetupEmptyType	SRC/xml_arch.c	/^SetupEmptyType()$/;"	f	file:
SetupGridLocations	SRC/xml_arch.c	/^SetupGridLocations(ezxml_t Locations,$/;"	f	file:
SetupOperation	SRC/SetupVPR.c	/^SetupOperation(IN t_options Options,$/;"	f	file:
SetupPinClasses	SRC/xml_arch.c	/^SetupPinClasses(ezxml_t Classes,$/;"	f	file:
SetupPinLocations	SRC/xml_arch.c	/^SetupPinLocations(ezxml_t Locations,$/;"	f	file:
SetupPlacerOpts	SRC/SetupVPR.c	/^SetupPlacerOpts(IN t_options Options,$/;"	f	file:
SetupRouterOpts	SRC/SetupVPR.c	/^SetupRouterOpts(IN t_options Options,$/;"	f	file:
SetupRoutingArch	SRC/SetupVPR.c	/^SetupRoutingArch(IN t_arch Arch,$/;"	f	file:
SetupSubblocksTSeq	SRC/xml_arch.c	/^SetupSubblocksTSeq(ezxml_t timing_seq_in,$/;"	f	file:
SetupSubblocksTcomb	SRC/xml_arch.c	/^SetupSubblocksTcomb(ezxml_t timing,$/;"	f	file:
SetupSwitches	SRC/SetupVPR.c	/^SetupSwitches(IN t_arch Arch,$/;"	f	file:
SetupTiming	SRC/SetupVPR.c	/^SetupTiming(IN t_options Options,$/;"	f	file:
SetupTypeTiming	SRC/xml_arch.c	/^SetupTypeTiming(ezxml_t timing,$/;"	f	file:
SetupVPR	SRC/SetupVPR.c	/^SetupVPR(IN t_options Options,$/;"	f
ShowAnnealSched	SRC/ShowSetup.c	/^ShowAnnealSched(IN struct s_annealing_sched AnnealSched)$/;"	f	file:
ShowOperation	SRC/ShowSetup.c	/^ShowOperation(IN enum e_operation Operation)$/;"	f	file:
ShowPlaceTiming	SRC/ReadOptions.h	/^    boolean ShowPlaceTiming;$/;"	m	struct:s_options
ShowPlacerOpts	SRC/ShowSetup.c	/^ShowPlacerOpts(IN t_options Options,$/;"	f	file:
ShowRouterOpts	SRC/ShowSetup.c	/^ShowRouterOpts(IN struct s_router_opts RouterOpts)$/;"	f	file:
ShowRoutingArch	SRC/ShowSetup.c	/^ShowRoutingArch(IN struct s_det_routing_arch RoutingArch)$/;"	f	file:
ShowSetup	SRC/ShowSetup.c	/^ShowSetup(IN t_options Options,$/;"	f
Str	SRC/vpr_types.h	/^    char *Str;$/;"	m	struct:s_TokenPair
Switches	SRC/xml_arch.h	/^     struct s_switch_inf *Switches;$/;"	m	struct:s_arch	typeref:struct:s_arch::s_switch_inf
THISTLE	SRC/graphics.h	/^  CYAN, RED, DARKGREEN, MAGENTA, BISQUE, LIGHTBLUE, THISTLE, PLUM, KHAKI, $/;"	e	enum:color_types
TIMING_ANALYSIS_ONLY	SRC/vpr_types.h	/^    TIMING_ANALYSIS_ONLY$/;"	e	enum:e_operation
TIMING_DRIVEN	SRC/vpr_types.h	/^{ BREADTH_FIRST, TIMING_DRIVEN, DIRECTED_SEARCH };$/;"	e	enum:e_router_algorithm
TO	SRC/place.c	34;"	d	file:
TOKENS	SRC/vpr_types.h	19;"	d
TOP	SRC/vpr_types.h	/^{ TOP = 0, RIGHT = 1, BOTTOM = 2, LEFT = 3 };$/;"	e	enum:e_side
TRUE	SRC/util.h	/^{ FALSE, TRUE }$/;"	e	enum:__anon4
TURQUOISE	SRC/graphics.h	/^  CORAL, TURQUOISE, MEDIUMPURPLE, DARKSLATEBLUE, DARKKHAKI, NUM_COLOR$/;"	e	enum:color_types
T_AREA_HEIGHT	SRC/graphics.c	88;"	d	file:
T_CONSTANT_GENERATOR	SRC/path_delay.c	76;"	d	file:
T_arr	SRC/path_delay2.h	/^    float T_arr;$/;"	m	struct:__anon7
T_comb	SRC/vpr_types.h	/^    float **T_comb;$/;"	m	struct:s_T_subblock
T_fb_ipin_to_sblk_ipin	SRC/vpr_types.h	/^    float T_fb_ipin_to_sblk_ipin;$/;"	m	struct:s_type_timing_inf
T_ipin_cblock	SRC/vpr_types.h	/^    float T_ipin_cblock;$/;"	m	struct:s_timing_inf
T_ipin_cblock	SRC/xml_arch.h	/^     float T_ipin_cblock;$/;"	m	struct:s_arch
T_linear	SRC/vpr_types.h	/^    float T_linear;$/;"	m	struct:s_rr_indexed_data
T_quadratic	SRC/vpr_types.h	/^    float T_quadratic;$/;"	m	struct:s_rr_indexed_data
T_req	SRC/path_delay2.h	/^    float T_req;$/;"	m	struct:__anon7
T_sblk_opin_to_fb_opin	SRC/vpr_types.h	/^    float T_sblk_opin_to_fb_opin;$/;"	m	struct:s_type_timing_inf
T_sblk_opin_to_sblk_ipin	SRC/vpr_types.h	/^    float T_sblk_opin_to_sblk_ipin;$/;"	m	struct:s_type_timing_inf
T_seq_in	SRC/vpr_types.h	/^    float *T_seq_in;$/;"	m	struct:s_T_subblock
T_seq_out	SRC/vpr_types.h	/^    float *T_seq_out;$/;"	m	struct:s_T_subblock
T_subblock	SRC/vpr_types.h	/^    t_T_subblock *T_subblock;$/;"	m	struct:s_type_timing_inf
Tdel	SRC/net_delay.c	/^    float Tdel;$/;"	m	struct:s_rc_node	file:
Tdel	SRC/path_delay2.h	/^    float Tdel;$/;"	m	struct:__anon6
Tdel	SRC/route_tree_timing.h	/^    float Tdel;$/;"	m	struct:s_rt_node
Tdel	SRC/vpr_types.h	/^    float Tdel;$/;"	m	struct:s_switch_inf
TimingAnalysis	SRC/ReadOptions.h	/^    boolean TimingAnalysis;$/;"	m	struct:s_options
UNIFORM	SRC/vpr_types.h	/^{ UNIFORM, GAUSSIAN, PULSE, DELTA };$/;"	e	enum:e_stat
UNIVERSAL	SRC/vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
UNI_DIRECTIONAL	SRC/vpr_types.h	/^{ UNI_DIRECTIONAL, BI_DIRECTIONAL };	\/* UDSD by AY *\/$/;"	e	enum:e_directionality
UN_SET	SRC/rr_graph2.c	19;"	d	file:
USER	SRC/vpr_types.h	/^{ FREE, RANDOM, USER };$/;"	e	enum:e_pad_loc_type
USER_SCHED	SRC/vpr_types.h	/^{ AUTO_SCHED, USER_SCHED };	\/* Annealing schedule *\/$/;"	e	enum:sched_type
W	SRC/xml_arch.h	/^     int W;$/;"	m	struct:s_clb_grid
WARNTAG	SRC/util.h	27;"	d
WARN_FLAGS	Makefile	/^WARN_FLAGS = -Wall -Wpointer-arith -Wcast-qual -Wstrict-prototypes -O -D__USE_FIXED_PROTOTYPES__ -ansi -pedantic -Wmissing-prototypes -Wshadow -Wcast-align -D_POSIX_SOURCE$/;"	m
WHITE	SRC/graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
WILTON	SRC/vpr_types.h	/^{ SUBSET, WILTON, UNIVERSAL, FULL };	\/* UDSD Modifications by WMF *\/$/;"	e	enum:e_switch_block_type
WL	SRC/place_and_route.h	5;"	d
WMF_DEBUG	SRC/main.c	/^boolean WMF_DEBUG = FALSE;$/;"	v
WNEED	SRC/place_and_route.h	4;"	d
W_seed	SRC/main.c	/^int W_seed = -1;$/;"	v
X11_INCLUDE	Makefile	/^X11_INCLUDE = -I\/usr\/X11R6\/include$/;"	m
XPOST	SRC/graphics.c	75;"	d	file:
XTOWORLD	SRC/graphics.c	81;"	d	file:
XmlReadArch	SRC/xml_arch.c	/^XmlReadArch(IN const char *ArchFile,$/;"	f
YELLOW	SRC/graphics.h	/^{ WHITE, BLACK, DARKGREY, LIGHTGREY, BLUE, GREEN, YELLOW,$/;"	e	enum:color_types
YPOST	SRC/graphics.c	76;"	d	file:
YTOWORLD	SRC/graphics.c	82;"	d	file:
_EZXML_H	SRC/ezxml.h	26;"	d
acc_cost	SRC/route_common.h	/^    float acc_cost;$/;"	m	struct:__anon11
acc_fac	SRC/ReadOptions.h	/^	float acc_fac;$/;"	m	struct:s_options
acc_fac	SRC/vpr_types.h	/^    float acc_fac;$/;"	m	struct:s_router_opts
add_path_to_route_tree	SRC/route_tree_timing.c	/^add_path_to_route_tree(struct s_heap *hptr,$/;"	f	file:
add_route_tree_to_heap	SRC/route_timing.c	/^add_route_tree_to_heap(t_rt_node * rt_node,$/;"	f	file:
add_rr_graph_C_from_switches	SRC/rr_graph_timing_params.c	/^add_rr_graph_C_from_switches(float C_ipin_cblock)$/;"	f
add_to_heap	SRC/route_common.c	/^add_to_heap(struct s_heap *hptr)$/;"	f	file:
add_to_mod_list	SRC/route_common.c	/^add_to_mod_list(float *fptr)$/;"	f
add_to_rc_tree	SRC/net_delay.c	/^add_to_rc_tree(t_rc_node * parent_rc,$/;"	f	file:
add_to_sort_heap	SRC/heapsort.c	/^add_to_sort_heap(int *heap,$/;"	f	file:
adjust_one_rr_occ_and_pcost	SRC/route_common.c	/^adjust_one_rr_occ_and_pcost(int inode,$/;"	f	file:
adjustwin	SRC/graphics.c	/^adjustwin(void (*drawscreen) (void))$/;"	f	file:
alloc_and_assign_internal_structures	SRC/timing_place_lookup.c	/^alloc_and_assign_internal_structures(struct s_net **original_net,$/;"	f	file:
alloc_and_load_actual_fc	SRC/rr_graph.c	/^alloc_and_load_actual_fc(IN int num_types,$/;"	f	file:
alloc_and_load_clb_opins_used_locally	SRC/route_common.c	/^alloc_and_load_clb_opins_used_locally(t_subblock_data subblock_data)$/;"	f	file:
alloc_and_load_edges_and_switches	SRC/rr_graph.c	/^alloc_and_load_edges_and_switches(IN t_rr_node * rr_node,$/;"	f
alloc_and_load_fanout_counts	SRC/path_delay.c	/^alloc_and_load_fanout_counts(int ***num_uses_of_fb_ipin_ptr,$/;"	f	file:
alloc_and_load_for_fast_cost_update	SRC/place.c	/^alloc_and_load_for_fast_cost_update(float place_cost_exp)$/;"	f	file:
alloc_and_load_global_route_seg_details	SRC/rr_graph.c	/^alloc_and_load_global_route_seg_details(IN int nodes_per_chan,$/;"	f	file:
alloc_and_load_grid	SRC/SetupVPR.c	/^alloc_and_load_grid(INOUT int *num_instances_type)$/;"	f	file:
alloc_and_load_perturb_ipins	SRC/rr_graph.c	/^alloc_and_load_perturb_ipins(IN int nodes_per_chan,$/;"	f	file:
alloc_and_load_pin_mappings	SRC/path_delay.c	/^alloc_and_load_pin_mappings(int ***block_pin_to_tnode_ptr,$/;"	f	file:
alloc_and_load_pin_to_track_map	SRC/rr_graph.c	/^alloc_and_load_pin_to_track_map(IN enum e_pin_type pin_type,$/;"	f	file:
alloc_and_load_placement_structs	SRC/place.c	/^alloc_and_load_placement_structs(int place_cost_type,$/;"	f	file:
alloc_and_load_rc_tree	SRC/net_delay.c	/^alloc_and_load_rc_tree(int inet,$/;"	f	file:
alloc_and_load_rr_clb_source	SRC/rr_graph.c	/^alloc_and_load_rr_clb_source(t_ivec *** rr_node_indices)$/;"	f	file:
alloc_and_load_rr_graph	SRC/rr_graph.c	/^alloc_and_load_rr_graph(IN int num_nodes,$/;"	f	file:
alloc_and_load_rr_indexed_data	SRC/rr_graph_indexed_data.c	/^alloc_and_load_rr_indexed_data(IN t_segment_inf * segment_inf,$/;"	f
alloc_and_load_rr_node_indices	SRC/rr_graph2.c	/^alloc_and_load_rr_node_indices(IN int nodes_per_chan,$/;"	f
alloc_and_load_rr_node_route_structs	SRC/route_common.c	/^alloc_and_load_rr_node_route_structs(void)$/;"	f
alloc_and_load_seg_details	SRC/rr_graph2.c	/^alloc_and_load_seg_details(INOUT int *nodes_per_chan,$/;"	f
alloc_and_load_sharable_switch_trans	SRC/rr_graph_area.c	/^alloc_and_load_sharable_switch_trans(int num_switch,$/;"	f	file:
alloc_and_load_switch_block_conn	SRC/rr_graph_sbox.c	/^alloc_and_load_switch_block_conn(IN int nodes_per_chan,$/;"	f
alloc_and_load_timing_graph	SRC/path_delay.c	/^alloc_and_load_timing_graph(t_timing_inf timing_inf,$/;"	f
alloc_and_load_timing_graph_levels	SRC/path_delay2.c	/^alloc_and_load_timing_graph_levels(void)$/;"	f
alloc_and_load_tnode_fanin_and_check_edges	SRC/path_delay2.c	/^alloc_and_load_tnode_fanin_and_check_edges(int *num_sinks_ptr)$/;"	f	file:
alloc_and_load_tnodes_and_net_mapping	SRC/path_delay.c	/^alloc_and_load_tnodes_and_net_mapping(int **num_uses_of_fb_ipin,$/;"	f	file:
alloc_and_load_track_to_pin_lookup	SRC/rr_graph.c	/^alloc_and_load_track_to_pin_lookup(IN int ****pin_to_track_map,$/;"	f	file:
alloc_and_load_unique_pin_list	SRC/place.c	/^alloc_and_load_unique_pin_list(void)$/;"	f	file:
alloc_and_load_unsharable_switch_trans	SRC/rr_graph_area.c	/^alloc_and_load_unsharable_switch_trans(int num_switch,$/;"	f	file:
alloc_block	SRC/timing_place_lookup.c	/^alloc_block(void)$/;"	f	file:
alloc_crit	SRC/timing_place.c	/^alloc_crit(struct s_linked_vptr **chunk_list_head_ptr)$/;"	f	file:
alloc_delta_arrays	SRC/timing_place_lookup.c	/^alloc_delta_arrays(void)$/;"	f	file:
alloc_draw_structs	SRC/draw.c	/^alloc_draw_structs(void)$/;"	f
alloc_hash_table	SRC/hash.c	/^alloc_hash_table(void)$/;"	f
alloc_heap_data	SRC/route_common.c	/^alloc_heap_data(void)$/;"	f	file:
alloc_ivector_and_copy_int_list	SRC/util.c	/^alloc_ivector_and_copy_int_list(t_linked_int ** list_head_ptr,$/;"	f
alloc_linked_f_pointer	SRC/route_common.c	/^alloc_linked_f_pointer(void)$/;"	f	file:
alloc_linked_rc_edge	SRC/net_delay.c	/^alloc_linked_rc_edge(t_linked_rc_edge ** rc_edge_free_list_ptr)$/;"	f	file:
alloc_linked_rt_edge	SRC/route_tree_timing.c	/^alloc_linked_rt_edge(void)$/;"	f	file:
alloc_lookups_and_criticalities	SRC/timing_place.c	/^alloc_lookups_and_criticalities(t_chan_width_dist chan_width_dist,$/;"	f
alloc_matrix	SRC/util.c	/^alloc_matrix(int nrmin,$/;"	f
alloc_matrix3	SRC/util.c	/^alloc_matrix3(int nrmin,$/;"	f
alloc_matrix4	SRC/util.c	/^alloc_matrix4(int nrmin,$/;"	f
alloc_net	SRC/timing_place_lookup.c	/^alloc_net(void)$/;"	f	file:
alloc_net_delay	SRC/net_delay.c	/^alloc_net_delay(struct s_linked_vptr **chunk_list_head_ptr)$/;"	f
alloc_net_rr_terminals	SRC/rr_graph.c	/^alloc_net_rr_terminals(void)$/;"	f	file:
alloc_net_slack	SRC/path_delay.c	/^alloc_net_slack(void)$/;"	f	file:
alloc_place_regions	SRC/place.c	/^alloc_place_regions(int num_regions)$/;"	f	file:
alloc_rc_node	SRC/net_delay.c	/^alloc_rc_node(t_rc_node ** rc_node_free_list_ptr)$/;"	f	file:
alloc_route_structs	SRC/route_common.c	/^alloc_route_structs(t_subblock_data subblock_data)$/;"	f
alloc_route_tree_timing_structs	SRC/route_tree_timing.c	/^alloc_route_tree_timing_structs(void)$/;"	f
alloc_routing_structs	SRC/timing_place_lookup.c	/^alloc_routing_structs(struct s_router_opts router_opts,$/;"	f	file:
alloc_rt_node	SRC/route_tree_timing.c	/^alloc_rt_node(void)$/;"	f	file:
alloc_saved_routing	SRC/route_common.c	/^alloc_saved_routing(t_ivec ** fb_opins_used_locally,$/;"	f
alloc_sblock_pattern_lookup	SRC/rr_graph2.c	/^alloc_sblock_pattern_lookup(IN int nx,$/;"	f
alloc_timing_driven_route_structs	SRC/route_timing.c	/^alloc_timing_driven_route_structs(float **pin_criticality_ptr,$/;"	f
alloc_trace_data	SRC/route_common.c	/^alloc_trace_data(void)$/;"	f	file:
allocate_and_load_critical_path	SRC/path_delay.c	/^allocate_and_load_critical_path(void)$/;"	f
alpha_t	SRC/vpr_types.h	/^    float alpha_t;$/;"	m	struct:s_annealing_sched
angnorm	SRC/graphics.c	/^angnorm(float ang)$/;"	f	file:
assess_swap	SRC/place.c	/^assess_swap(float delta_c,$/;"	f	file:
assign_blocks_and_route_net	SRC/timing_place_lookup.c	/^assign_blocks_and_route_net(t_type_ptr source_type,$/;"	f	file:
assign_locations	SRC/timing_place_lookup.c	/^assign_locations(t_type_ptr source_type,$/;"	f	file:
astar_fac	SRC/ReadOptions.h	/^	float astar_fac;$/;"	m	struct:s_options
astar_fac	SRC/vpr_types.h	/^    float astar_fac;$/;"	m	struct:s_router_opts
attr	SRC/ezxml.c	/^    char ***attr;		\/* default attributes *\/$/;"	m	struct:ezxml_root	file:
attr	SRC/ezxml.h	/^	char **attr;		\/* tag attributes { name, value, name, value, ... NULL } *\/$/;"	m	struct:ezxml
backward_path_cost	SRC/route_common.h	/^    float backward_path_cost;$/;"	m	struct:__anon11
backward_path_cost	SRC/route_common.h	/^    float backward_path_cost;$/;"	m	struct:s_heap
base_cost	SRC/vpr_types.h	/^    float base_cost;$/;"	m	struct:s_rr_indexed_data
base_cost_type	SRC/ReadOptions.h	/^	enum e_base_cost_type base_cost_type;$/;"	m	struct:s_options	typeref:enum:s_options::e_base_cost_type
base_cost_type	SRC/vpr_types.h	/^    enum e_base_cost_type base_cost_type;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_base_cost_type
bb_coords	SRC/place.c	/^static struct s_bb *bb_coords = NULL, *bb_num_on_edges = NULL;$/;"	v	typeref:struct:s_bb	file:
bb_factor	SRC/ReadOptions.h	/^	int bb_factor;$/;"	m	struct:s_options
bb_factor	SRC/vpr_types.h	/^    int bb_factor;$/;"	m	struct:s_router_opts
bb_num_on_edges	SRC/place.c	/^static struct s_bb *bb_coords = NULL, *bb_num_on_edges = NULL;$/;"	v	typeref:struct:	file:
bend_cost	SRC/ReadOptions.h	/^	float bend_cost;$/;"	m	struct:s_options
bend_cost	SRC/vpr_types.h	/^    float bend_cost;$/;"	m	struct:s_router_opts
binary_search	SRC/main.c	/^int binary_search = -1;$/;"	v
binary_search_place_and_route	SRC/place_and_route.c	/^binary_search_place_and_route(struct s_placer_opts placer_opts,$/;"	f	file:
bitfield	SRC/vpr_types.h	/^typedef size_t bitfield;$/;"	t
block	SRC/globals_declare.h	/^struct s_block *block;$/;"	v	typeref:struct:s_block
block	SRC/main.c	/^struct s_block *block = NULL;$/;"	v	typeref:struct:s_block
block_color	SRC/draw.c	/^static enum color_types *net_color, *block_color;$/;"	v	typeref:enum:	file:
block_dist	SRC/ReadOptions.h	/^    int block_dist;$/;"	m	struct:s_options
block_dist	SRC/vpr_types.h	/^    int block_dist;$/;"	m	struct:s_placer_opts
blocks	SRC/vpr_types.h	/^    int *blocks;$/;"	m	struct:s_grid_tile
boolean	SRC/util.h	/^boolean;$/;"	t	typeref:enum:__anon4
boolean	SRC/util.h	/^typedef int boolean;$/;"	t
breadth_first_add_source_to_heap	SRC/route_breadth_first.c	/^breadth_first_add_source_to_heap(int inet)$/;"	f	file:
breadth_first_expand_neighbours	SRC/route_breadth_first.c	/^breadth_first_expand_neighbours(int inode,$/;"	f	file:
breadth_first_expand_trace_segment	SRC/route_breadth_first.c	/^breadth_first_expand_trace_segment(struct s_trace *start_ptr,$/;"	f	file:
breadth_first_route_net	SRC/route_breadth_first.c	/^breadth_first_route_net(int inet,$/;"	f	file:
buf_size	SRC/vpr_types.h	/^    float buf_size;$/;"	m	struct:s_switch_inf
buffered	SRC/vpr_types.h	/^    boolean buffered;$/;"	m	struct:s_switch_inf
build_bidir_rr_opins	SRC/rr_graph.c	/^build_bidir_rr_opins(IN int i,$/;"	f	file:
build_block_output_tnode	SRC/path_delay.c	/^build_block_output_tnode(int inode,$/;"	f	file:
build_default_menu	SRC/graphics.c	/^build_default_menu(void)$/;"	f	file:
build_fb_tnodes	SRC/path_delay.c	/^build_fb_tnodes(int iblk,$/;"	f	file:
build_rr_graph	SRC/rr_graph.c	/^build_rr_graph(IN t_graph_type graph_type,$/;"	f
build_rr_sinks_sources	SRC/rr_graph.c	/^build_rr_sinks_sources(IN int i,$/;"	f	file:
build_rr_xchan	SRC/rr_graph.c	/^build_rr_xchan(IN int i,$/;"	f	file:
build_rr_ychan	SRC/rr_graph.c	/^build_rr_ychan(IN int i,$/;"	f	file:
build_subblock_tnodes	SRC/path_delay.c	/^build_subblock_tnodes(int **n_uses_of_sblk_opin,$/;"	f	file:
build_textarea	SRC/graphics.c	/^build_textarea(void)$/;"	f	file:
build_unidir_rr_opins	SRC/rr_graph.c	/^build_unidir_rr_opins(IN int i,$/;"	f	file:
button	SRC/graphics.c	/^static t_button *button;	\/* [0..num_buttons-1] *\/$/;"	v	file:
capacity	SRC/vpr_types.h	/^    float capacity;$/;"	m	struct:s_place_region
capacity	SRC/vpr_types.h	/^    int capacity;$/;"	m	struct:s_type_descriptor
capacity	SRC/vpr_types.h	/^    short capacity;$/;"	m	struct:s_rr_node
cb	SRC/vpr_types.h	/^    boolean *cb;$/;"	m	struct:s_seg_details
cb	SRC/vpr_types.h	/^    boolean *cb;$/;"	m	struct:s_segment_inf
cb_len	SRC/vpr_types.h	/^    int cb_len;$/;"	m	struct:s_segment_inf
chan_width_io	SRC/vpr_types.h	/^    float chan_width_io;$/;"	m	struct:s_chan_width_dist
chan_width_x	SRC/globals_declare.h	/^int *chan_width_x, *chan_width_y;	\/* numerical form *\/$/;"	v
chan_width_x	SRC/main.c	/^int *chan_width_x = NULL;	\/* [0..ny] *\/$/;"	v
chan_width_y	SRC/globals_declare.h	/^int *chan_width_x, *chan_width_y;	\/* numerical form *\/$/;"	v
chan_width_y	SRC/main.c	/^int *chan_width_y = NULL;	\/* [0..nx] *\/$/;"	v
chan_x_dist	SRC/vpr_types.h	/^    t_chan chan_x_dist;$/;"	m	struct:s_chan_width_dist
chan_y_dist	SRC/vpr_types.h	/^    t_chan chan_y_dist;$/;"	m	struct:s_chan_width_dist
chanx_chany_adjacent	SRC/check_route.c	/^chanx_chany_adjacent(int chanx_node,$/;"	f	file:
chanx_place_cost_fac	SRC/place.c	/^static float **chanx_place_cost_fac, **chany_place_cost_fac;$/;"	v	file:
chany_place_cost_fac	SRC/place.c	/^static float **chanx_place_cost_fac, **chany_place_cost_fac;$/;"	v	file:
check_adjacent	SRC/check_route.c	/^check_adjacent(int from_node,$/;"	f	file:
check_all_tracks_reach_pins	SRC/rr_graph.c	/^check_all_tracks_reach_pins(t_type_ptr type,$/;"	f	file:
check_connections_to_global_fb_pins	SRC/check_netlist.c	/^check_connections_to_global_fb_pins(int inet)$/;"	f	file:
check_fb_conn	SRC/check_netlist.c	/^check_fb_conn(int iblk,$/;"	f	file:
check_fb_to_subblock_connections	SRC/check_netlist.c	/^check_fb_to_subblock_connections(int iblk,$/;"	f	file:
check_for_duplicate_block_names	SRC/check_netlist.c	/^check_for_duplicate_block_names(void)$/;"	f	file:
check_for_multiple_sink_connections	SRC/check_netlist.c	/^check_for_multiple_sink_connections(void)$/;"	f	file:
check_internal_subblock_connections	SRC/check_netlist.c	/^check_internal_subblock_connections(t_subblock_data * subblock_data_ptr,$/;"	f	file:
check_locally_used_fb_opins	SRC/check_route.c	/^check_locally_used_fb_opins(t_ivec ** fb_opins_used_locally,$/;"	f	file:
check_netlist	SRC/check_netlist.c	/^check_netlist(t_subblock_data * subblock_data_ptr)$/;"	f
check_node	SRC/check_rr_graph.c	/^check_node(int inode,$/;"	f
check_node_and_range	SRC/check_route.c	/^check_node_and_range(int inode,$/;"	f	file:
check_pass_transistors	SRC/check_rr_graph.c	/^check_pass_transistors(int from_node)$/;"	f	file:
check_place	SRC/place.c	/^check_place(float bb_cost,$/;"	f	file:
check_route	SRC/check_route.c	/^check_route(enum e_route_type route_type,$/;"	f
check_rr_graph	SRC/check_rr_graph.c	/^check_rr_graph(IN t_graph_type graph_type,$/;"	f
check_sink	SRC/check_route.c	/^check_sink(int inode,$/;"	f	file:
check_source	SRC/check_route.c	/^check_source(int inode,$/;"	f	file:
check_subblock_pin	SRC/check_netlist.c	/^check_subblock_pin(int fb_pin,$/;"	f	file:
check_subblocks	SRC/check_netlist.c	/^check_subblocks(int iblk,$/;"	f	file:
check_switch	SRC/check_route.c	/^check_switch(struct s_trace *tptr,$/;"	f	file:
check_timing_graph	SRC/path_delay2.c	/^check_timing_graph(int num_const_gen,$/;"	f
child	SRC/ezxml.h	/^	ezxml_t child;		\/* head of sub tag list, NULL if none *\/$/;"	m	struct:ezxml
child	SRC/net_delay.c	/^    struct s_rc_node *child;$/;"	m	struct:s_linked_rc_edge	typeref:struct:s_linked_rc_edge::s_rc_node	file:
child	SRC/route_tree_timing.h	/^    struct s_rt_node *child;$/;"	m	struct:s_linked_rt_edge	typeref:struct:s_linked_rt_edge::s_rt_node
child_list	SRC/net_delay.c	/^	t_linked_rc_edge *child_list;$/;"	m	union:s_rc_node::__anon1	file:
child_list	SRC/route_tree_timing.h	/^	t_linked_rt_edge *child_list;$/;"	m	union:s_rt_node::__anon12
chunk_bytes_avail	SRC/rr_graph.c	/^static int chunk_bytes_avail = 0;$/;"	v	file:
chunk_next_avail_mem	SRC/rr_graph.c	/^static char *chunk_next_avail_mem = NULL;$/;"	v	file:
class_inf	SRC/vpr_types.h	/^    struct s_class *class_inf;	\/* [0..num_class-1] *\/$/;"	m	struct:s_type_descriptor	typeref:struct:s_type_descriptor::s_class
clb_grid	SRC/xml_arch.h	/^     struct s_clb_grid clb_grid;$/;"	m	struct:s_arch	typeref:struct:s_arch::s_clb_grid
clb_opins_used_locally	SRC/timing_place_lookup.c	/^static t_ivec **clb_opins_used_locally;$/;"	v	file:
clearscreen	SRC/graphics.c	/^clearscreen(void)$/;"	f
clock	SRC/vpr_types.h	/^    int clock;$/;"	m	struct:s_subblock
close	SRC/ezxml.c	61;"	d	file:
close_graphics	SRC/graphics.c	/^close_graphics(void)$/;"	f
close_postscript	SRC/graphics.c	/^close_postscript(void)$/;"	f
col_rel	SRC/vpr_types.h	/^    float col_rel;$/;"	m	struct:s_grid_loc_def
color_types	SRC/graphics.h	/^enum color_types$/;"	g
colors	SRC/graphics.c	/^static int colors[NUM_COLOR];$/;"	v	file:
comp_bb_cost	SRC/place.c	/^comp_bb_cost(int method,$/;"	f	file:
comp_delta_td_cost	SRC/place.c	/^comp_delta_td_cost(int b_from,$/;"	f	file:
comp_td_costs	SRC/place.c	/^comp_td_costs(float *timing_cost,$/;"	f	file:
comp_td_point_to_point_delay	SRC/place.c	/^comp_td_point_to_point_delay(int inet,$/;"	f	file:
comp_width	SRC/place_and_route.c	/^comp_width(t_chan * chan,$/;"	f	file:
compute_delay_lookup_tables	SRC/timing_place_lookup.c	/^compute_delay_lookup_tables(struct s_router_opts router_opts,$/;"	f
compute_delta_arrays	SRC/timing_place_lookup.c	/^compute_delta_arrays(struct s_router_opts router_opts,$/;"	f	file:
compute_delta_fb_to_fb	SRC/timing_place_lookup.c	/^compute_delta_fb_to_fb(struct s_router_opts router_opts,$/;"	f	file:
compute_delta_fb_to_io	SRC/timing_place_lookup.c	/^compute_delta_fb_to_io(struct s_router_opts router_opts,$/;"	f	file:
compute_delta_io_to_fb	SRC/timing_place_lookup.c	/^compute_delta_io_to_fb(struct s_router_opts router_opts,$/;"	f	file:
compute_delta_io_to_io	SRC/timing_place_lookup.c	/^compute_delta_io_to_io(struct s_router_opts router_opts,$/;"	f	file:
compute_net_pin_index_values	SRC/place.c	/^compute_net_pin_index_values()$/;"	f	file:
compute_net_slacks	SRC/path_delay.c	/^compute_net_slacks(float **net_slack)$/;"	f	file:
constant_net_delay	SRC/ReadOptions.h	/^	float constant_net_delay;$/;"	m	struct:s_options
cont	SRC/util.c	/^static int cont;		\/* line continued? *\/$/;"	v	file:
cost	SRC/route_common.h	/^    float cost;$/;"	m	struct:s_heap
cost	SRC/vpr_types.h	/^    float cost;$/;"	m	struct:s_place_region
cost_index	SRC/vpr_types.h	/^    short cost_index;$/;"	m	struct:s_rr_node
cost_methods	SRC/place.c	/^enum cost_methods$/;"	g	file:
count	SRC/hash.h	/^    int count;$/;"	m	struct:s_hash
count_bidir_routing_transistors	SRC/rr_graph_area.c	/^count_bidir_routing_transistors(int num_switch,$/;"	f
count_connections	SRC/place.c	/^count_connections()$/;"	f	file:
count_routing_transistors	SRC/rr_graph_area.c	/^count_routing_transistors(enum e_directionality directionality,$/;"	f
count_unidir_routing_transistors	SRC/rr_graph_area.c	/^count_unidir_routing_transistors(t_segment_inf * segment_inf,$/;"	f
create_button	SRC/graphics.c	/^create_button(char *prev_button_text,$/;"	f
criticality_exp	SRC/ReadOptions.h	/^	float criticality_exp;$/;"	m	struct:s_options
criticality_exp	SRC/vpr_types.h	/^    float criticality_exp;$/;"	m	struct:s_router_opts
cross_count	SRC/place.c	/^static const float cross_count[50] = {	\/* [0..49] *\/$/;"	v	file:
cur	SRC/ezxml.c	/^    ezxml_t cur;		\/* current xml tree insertion point *\/$/;"	m	struct:ezxml_root	file:
current_random	SRC/util.c	/^static unsigned int current_random = 0;$/;"	v	file:
currentcolor	SRC/graphics.c	/^static int currentcolor = BLACK;$/;"	v	file:
currentfontsize	SRC/graphics.c	/^static int currentfontsize = 10;$/;"	v	file:
currentlinestyle	SRC/graphics.c	/^static int currentlinestyle = SOLID;$/;"	v	file:
currentlinewidth	SRC/graphics.c	/^static int currentlinewidth = 0;$/;"	v	file:
data	SRC/util.h	/^    int data;$/;"	m	struct:s_linked_int
data_vptr	SRC/util.h	/^    void *data_vptr;$/;"	m	struct:s_linked_vptr
dc	SRC/vpr_types.h	/^    float dc;$/;"	m	struct:s_chan
default_message	SRC/draw.c	/^static char default_message[BUFSIZE];	\/* Default screen message on screen *\/$/;"	v	file:
delayless_switch	SRC/vpr_types.h	/^    short delayless_switch;$/;"	m	struct:s_det_routing_arch
delta_fb_to_fb	SRC/timing_place_lookup.c	/^float **delta_fb_to_fb;$/;"	v
delta_fb_to_io	SRC/timing_place_lookup.c	/^float **delta_fb_to_io;$/;"	v
delta_io_to_fb	SRC/timing_place_lookup.c	/^float **delta_io_to_fb;$/;"	v
delta_io_to_io	SRC/timing_place_lookup.c	/^float **delta_io_to_io;$/;"	v
deselect_all	SRC/draw.c	/^deselect_all(void)$/;"	f	file:
destroy_button	SRC/graphics.c	/^destroy_button(char *button_text)$/;"	f
directed_search_add_source_to_heap	SRC/route_directed_search.c	/^directed_search_add_source_to_heap(int inet,$/;"	f	file:
directed_search_expand_neighbours	SRC/route_directed_search.c	/^directed_search_expand_neighbours(struct s_heap *current,$/;"	f	file:
directed_search_expand_trace_segment	SRC/route_directed_search.c	/^directed_search_expand_trace_segment(struct s_trace *start_ptr,$/;"	f	file:
directed_search_route_net	SRC/route_directed_search.c	/^directed_search_route_net(int inet,$/;"	f	file:
direction	SRC/vpr_types.h	/^    enum e_direction direction;	\/* UDSD by AY *\/$/;"	m	struct:s_rr_node	typeref:enum:s_rr_node::e_direction
direction	SRC/vpr_types.h	/^    enum e_direction direction;	\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	typeref:enum:s_seg_details::e_direction
directionality	SRC/vpr_types.h	/^    enum e_directionality directionality;	\/* UDSD by AY *\/$/;"	m	struct:s_det_routing_arch	typeref:enum:s_det_routing_arch::e_directionality
directionality	SRC/vpr_types.h	/^    enum e_directionality directionality;$/;"	m	struct:s_segment_inf	typeref:enum:s_segment_inf::e_directionality
disp_type	SRC/graphics.c	/^static int disp_type;		\/* Selects SCREEN or POSTSCRIPT *\/$/;"	v	file:
display	SRC/graphics.c	/^static Display *display;$/;"	v	file:
display_height	SRC/graphics.c	/^static unsigned int display_width, display_height;	\/* screen size *\/$/;"	v	file:
display_width	SRC/graphics.c	/^static unsigned int display_width, display_height;	\/* screen size *\/$/;"	v	file:
distr	SRC/rr_graph.c	/^    int *distr;$/;"	m	struct:s_mux_size_distribution	file:
do_constant_net_delay_timing_analysis	SRC/path_delay.c	/^do_constant_net_delay_timing_analysis(t_timing_inf timing_inf,$/;"	f
draw_chanx_to_chanx_edge	SRC/draw.c	/^draw_chanx_to_chanx_edge(int from_node,$/;"	f	file:
draw_chanx_to_chany_edge	SRC/draw.c	/^draw_chanx_to_chany_edge(int chanx_node,$/;"	f	file:
draw_chany_to_chany_edge	SRC/draw.c	/^draw_chany_to_chany_edge(int from_node,$/;"	f	file:
draw_congestion	SRC/draw.c	/^draw_congestion(void)$/;"	f	file:
draw_message	SRC/graphics.c	/^draw_message(void)$/;"	f
draw_pin_to_chan_edge	SRC/draw.c	/^draw_pin_to_chan_edge(int pin_node,$/;"	f	file:
draw_route_type	SRC/draw.c	/^static enum e_route_type draw_route_type;$/;"	v	typeref:enum:e_route_type	file:
draw_rr	SRC/draw.c	/^draw_rr(void)$/;"	f
draw_rr_chanx	SRC/draw.c	/^draw_rr_chanx(int inode,$/;"	f	file:
draw_rr_chany	SRC/draw.c	/^draw_rr_chany(int inode,$/;"	f	file:
draw_rr_edges	SRC/draw.c	/^draw_rr_edges(int inode)$/;"	f	file:
draw_rr_pin	SRC/draw.c	/^draw_rr_pin(int inode,$/;"	f	file:
draw_rr_switch	SRC/draw.c	/^draw_rr_switch(float from_x,$/;"	f	file:
draw_rr_toggle	SRC/draw.c	/^static enum e_draw_rr_toggle draw_rr_toggle = DRAW_NO_RR;	\/* UDSD by AY *\/$/;"	v	typeref:enum:e_draw_rr_toggle	file:
draw_triangle_along_line	SRC/draw.c	/^draw_triangle_along_line(float xend,$/;"	f	file:
draw_x	SRC/draw.c	/^draw_x(float x,$/;"	f	file:
drawarc	SRC/graphics.c	/^drawarc(float xc,$/;"	f
drawarc	SRC/graphics.c	/^drawarc(float xcen,$/;"	f
drawbut	SRC/graphics.c	/^drawbut(int bnum)$/;"	f	file:
drawline	SRC/graphics.c	/^drawline(float x1,$/;"	f
drawmenu	SRC/graphics.c	/^drawmenu(void)$/;"	f	file:
drawnets	SRC/draw.c	/^drawnets(void)$/;"	f	file:
drawplace	SRC/draw.c	/^drawplace(void)$/;"	f	file:
drawrect	SRC/graphics.c	/^drawrect(float x1,$/;"	f
drawroute	SRC/draw.c	/^drawroute(enum e_draw_net_type draw_net_type)$/;"	f	file:
drawscreen	SRC/draw.c	/^drawscreen()$/;"	f	file:
drawtext	SRC/graphics.c	/^drawtext(float xc,$/;"	f
drivers	SRC/vpr_types.h	/^    enum e_drivers drivers;	\/* UDSD by AY *\/$/;"	m	struct:s_rr_node	typeref:enum:s_rr_node::e_drivers
drivers	SRC/vpr_types.h	/^    enum e_drivers drivers;	\/* UDSD by AY *\/$/;"	m	struct:s_seg_details	typeref:enum:s_seg_details::e_drivers
dummy_type_descriptors	SRC/timing_place_lookup.c	/^static t_type_descriptor dummy_type_descriptors[NUM_TYPES_USED];$/;"	v	file:
dump_rr_graph	SRC/rr_graph.c	/^dump_rr_graph(IN const char *file_name)$/;"	f
dump_seg_details	SRC/rr_graph2.c	/^dump_seg_details(t_seg_details * seg_details,$/;"	f
duplicate_pins	SRC/place.c	/^static int *duplicate_pins;$/;"	v	file:
e	SRC/ezxml.c	/^    char *e;			\/* end of work area *\/$/;"	m	struct:ezxml_root	file:
e_Fc_type	SRC/vpr_types.h	/^enum e_Fc_type$/;"	g
e_OptionArgToken	SRC/OptionTokens.h	/^enum e_OptionArgToken$/;"	g
e_OptionBaseToken	SRC/OptionTokens.h	/^enum e_OptionBaseToken$/;"	g
e_base_cost_type	SRC/vpr_types.h	/^enum e_base_cost_type$/;"	g
e_cost_indices	SRC/vpr_types.h	/^enum e_cost_indices$/;"	g
e_direction	SRC/vpr_types.h	/^enum e_direction$/;"	g
e_directionality	SRC/vpr_types.h	/^enum e_directionality$/;"	g
e_draw_net_type	SRC/draw.c	/^enum e_draw_net_type$/;"	g	file:
e_draw_rr_toggle	SRC/draw.c	/^enum e_draw_rr_toggle$/;"	g	file:
e_drivers	SRC/vpr_types.h	/^enum e_drivers$/;"	g
e_edge_dir	SRC/draw.c	/^enum e_edge_dir$/;"	g	file:
e_graph_type	SRC/rr_graph.h	/^enum e_graph_type$/;"	g
e_grid_loc_type	SRC/vpr_types.h	/^enum e_grid_loc_type$/;"	g
e_operation	SRC/vpr_types.h	/^enum e_operation$/;"	g
e_pad_loc_type	SRC/vpr_types.h	/^enum e_pad_loc_type$/;"	g
e_pin_type	SRC/vpr_types.h	/^enum e_pin_type$/;"	g
e_place_algorithm	SRC/vpr_types.h	/^enum e_place_algorithm$/;"	g
e_route_type	SRC/vpr_types.h	/^enum e_route_type$/;"	g
e_router_algorithm	SRC/vpr_types.h	/^enum e_router_algorithm$/;"	g
e_rr_type	SRC/vpr_types.h	/^typedef enum e_rr_type$/;"	g
e_side	SRC/vpr_types.h	/^enum e_side$/;"	g
e_stat	SRC/vpr_types.h	/^enum e_stat$/;"	g
e_subblock_pin_type	SRC/path_delay.c	/^enum e_subblock_pin_type$/;"	g	file:
e_switch_block_type	SRC/vpr_types.h	/^enum e_switch_block_type$/;"	g
edge	SRC/rr_graph_util.h	/^    int edge;$/;"	m	struct:s_linked_edge
edges	SRC/vpr_types.h	/^    int *edges;$/;"	m	struct:s_rr_node
empty_heap	SRC/route_common.c	/^empty_heap(void)$/;"	f
enable_timing_computations	SRC/vpr_types.h	/^    boolean enable_timing_computations;$/;"	m	struct:s_placer_opts
end_track	SRC/vpr_types.h	/^    int end_track;		\/* UDSD by AY *\/$/;"	m	struct:s_seg_details
ent	SRC/ezxml.c	/^    char **ent;			\/* general entities (ampersand sequences) *\/$/;"	m	struct:ezxml_root	file:
err	SRC/ezxml.c	/^    char err[EZXML_ERRL];	\/* error string *\/$/;"	m	struct:ezxml_root	file:
event_loop	SRC/graphics.c	/^event_loop(void (*act_on_button) (float x,$/;"	f
exit_crit	SRC/place.c	/^exit_crit(float t,$/;"	f	file:
exit_t	SRC/vpr_types.h	/^    float exit_t;$/;"	m	struct:s_annealing_sched
ezxml	SRC/ezxml.h	/^    struct ezxml$/;"	s
ezxml_add_child	SRC/ezxml.c	/^ezxml_add_child(ezxml_t xml,$/;"	f
ezxml_add_child_d	SRC/ezxml.h	139;"	d
ezxml_ampencode	SRC/ezxml.c	/^ezxml_ampencode(const char *s,$/;"	f
ezxml_attr	SRC/ezxml.c	/^ezxml_attr(ezxml_t xml,$/;"	f
ezxml_char_content	SRC/ezxml.c	/^ezxml_char_content(ezxml_root_t root,$/;"	f
ezxml_child	SRC/ezxml.c	/^ezxml_child(ezxml_t xml,$/;"	f
ezxml_close_tag	SRC/ezxml.c	/^ezxml_close_tag(ezxml_root_t root,$/;"	f
ezxml_cut	SRC/ezxml.c	/^ezxml_cut(ezxml_t xml)$/;"	f
ezxml_decode	SRC/ezxml.c	/^ezxml_decode(char *s,$/;"	f
ezxml_ent_ok	SRC/ezxml.c	/^ezxml_ent_ok(char *name,$/;"	f
ezxml_err	SRC/ezxml.c	/^ezxml_err(ezxml_root_t root,$/;"	f
ezxml_error	SRC/ezxml.c	/^ezxml_error(ezxml_t xml)$/;"	f
ezxml_free	SRC/ezxml.c	/^ezxml_free(ezxml_t xml)$/;"	f
ezxml_free_attr	SRC/ezxml.c	/^ezxml_free_attr(char **attr)$/;"	f
ezxml_get	SRC/ezxml.c	/^ezxml_get(ezxml_t xml,$/;"	f
ezxml_idx	SRC/ezxml.c	/^ezxml_idx(ezxml_t xml,$/;"	f
ezxml_insert	SRC/ezxml.c	/^ezxml_insert(ezxml_t xml,$/;"	f
ezxml_internal_dtd	SRC/ezxml.c	/^ezxml_internal_dtd(ezxml_root_t root,$/;"	f
ezxml_move	SRC/ezxml.h	174;"	d
ezxml_name	SRC/ezxml.h	93;"	d
ezxml_new	SRC/ezxml.c	/^ezxml_new(const char *name)$/;"	f
ezxml_new_d	SRC/ezxml.h	130;"	d
ezxml_next	SRC/ezxml.h	85;"	d
ezxml_open_tag	SRC/ezxml.c	/^ezxml_open_tag(ezxml_root_t root,$/;"	f
ezxml_parse_fd	SRC/ezxml.c	/^ezxml_parse_fd(int fd)$/;"	f
ezxml_parse_file	SRC/ezxml.c	/^ezxml_parse_file(const char *file)$/;"	f
ezxml_parse_fp	SRC/ezxml.c	/^ezxml_parse_fp(FILE * fp)$/;"	f
ezxml_parse_str	SRC/ezxml.c	/^ezxml_parse_str(char *s,$/;"	f
ezxml_pi	SRC/ezxml.c	/^ezxml_pi(ezxml_t xml,$/;"	f
ezxml_proc_inst	SRC/ezxml.c	/^ezxml_proc_inst(ezxml_root_t root,$/;"	f
ezxml_remove	SRC/ezxml.h	177;"	d
ezxml_root	SRC/ezxml.c	/^struct ezxml_root$/;"	s	file:
ezxml_root_t	SRC/ezxml.c	/^typedef struct ezxml_root *ezxml_root_t;$/;"	t	typeref:struct:ezxml_root	file:
ezxml_set_attr	SRC/ezxml.c	/^ezxml_set_attr(ezxml_t xml,$/;"	f
ezxml_set_attr_d	SRC/ezxml.h	157;"	d
ezxml_set_flag	SRC/ezxml.c	/^ezxml_set_flag(ezxml_t xml,$/;"	f
ezxml_set_txt	SRC/ezxml.c	/^ezxml_set_txt(ezxml_t xml,$/;"	f
ezxml_set_txt_d	SRC/ezxml.h	147;"	d
ezxml_str2utf8	SRC/ezxml.c	/^ezxml_str2utf8(char **s,$/;"	f
ezxml_t	SRC/ezxml.h	/^    typedef struct ezxml *ezxml_t;$/;"	t	typeref:struct:ezxml
ezxml_toxml	SRC/ezxml.c	/^ezxml_toxml(ezxml_t xml)$/;"	f
ezxml_toxml_r	SRC/ezxml.c	/^ezxml_toxml_r(ezxml_t xml,$/;"	f
ezxml_txt	SRC/ezxml.h	96;"	d
ezxml_vget	SRC/ezxml.c	/^ezxml_vget(ezxml_t xml,$/;"	f
fan_in	SRC/vpr_types.h	/^    short fan_in;$/;"	m	struct:s_rr_node
fc	SRC/place_and_route.h	/^    int fc;			\/* at this fc *\/$/;"	m	struct:s_fmap_cell
fcn	SRC/graphics.c	/^    void (*fcn) (void (*drawscreen) (void));$/;"	m	struct:__anon5	file:
feasible_routing	SRC/route_common.c	/^feasible_routing(void)$/;"	f
fillarc	SRC/graphics.c	/^fillarc(float xc,$/;"	f
fillarc	SRC/graphics.c	/^fillarc(float xcen,$/;"	f
fillpoly	SRC/graphics.c	/^fillpoly(t_point * points,$/;"	f
fillrect	SRC/graphics.c	/^fillrect(float x1,$/;"	f
find_affected_nets	SRC/place.c	/^find_affected_nets(int *nets_to_update,$/;"	f	file:
find_label_of_track	SRC/rr_graph2.c	/^find_label_of_track(int *wire_mux_on_track,$/;"	f	file:
find_to	SRC/place.c	/^find_to(int x_from,$/;"	f	file:
find_type_col	SRC/SetupVPR.c	/^find_type_col(IN int x)$/;"	f	file:
first_iter_pres_fac	SRC/ReadOptions.h	/^	float first_iter_pres_fac;$/;"	m	struct:s_options
first_iter_pres_fac	SRC/vpr_types.h	/^    float first_iter_pres_fac;$/;"	m	struct:s_router_opts
fixed_channel_width	SRC/vpr_types.h	/^    int fixed_channel_width;$/;"	m	struct:s_router_opts
flags	SRC/ezxml.h	/^	short flags;		\/* additional information *\/$/;"	m	struct:ezxml
flushinput	SRC/graphics.c	/^flushinput(void)$/;"	f
font_info	SRC/graphics.c	/^static XFontStruct *font_info[MAX_FONT_SIZE + 1];	\/* Data for each size *\/$/;"	v	file:
font_is_loaded	SRC/graphics.c	/^static int font_is_loaded[MAX_FONT_SIZE + 1];	\/* 1: loaded, 0: not  *\/$/;"	v	file:
force_setcolor	SRC/graphics.c	/^force_setcolor(int cindex)$/;"	f	file:
force_setfontsize	SRC/graphics.c	/^force_setfontsize(int pointsize)$/;"	f	file:
force_setlinestyle	SRC/graphics.c	/^force_setlinestyle(int linestyle)$/;"	f	file:
force_setlinewidth	SRC/graphics.c	/^force_setlinewidth(int linewidth)$/;"	f	file:
fptr	SRC/vpr_types.h	/^    float *fptr;$/;"	m	struct:s_linked_f_pointer
frac_cb	SRC/vpr_types.h	/^    float frac_cb;$/;"	m	struct:s_segment_inf
frac_sb	SRC/vpr_types.h	/^    float frac_sb;$/;"	m	struct:s_segment_inf
freeArch	SRC/main.c	/^static void freeArch(t_arch* Arch)$/;"	f	file:
freeGrid	SRC/SetupVPR.c	/^freeGrid()$/;"	f	file:
free_and_reset_internal_structures	SRC/timing_place_lookup.c	/^free_and_reset_internal_structures(struct s_net *original_net,$/;"	f	file:
free_chunk_memory	SRC/util.c	/^free_chunk_memory(struct s_linked_vptr *chunk_ptr_head)$/;"	f
free_crit	SRC/timing_place.c	/^free_crit(struct s_linked_vptr **chunk_list_head_ptr)$/;"	f	file:
free_delta_arrays	SRC/timing_place_lookup.c	/^free_delta_arrays(void)$/;"	f	file:
free_edge_list_head	SRC/rr_graph2.c	/^t_linked_edge *free_edge_list_head = NULL;$/;"	v
free_fanout_counts	SRC/path_delay.c	/^free_fanout_counts(int **num_uses_of_fb_ipin,$/;"	f	file:
free_fast_cost_update_structs	SRC/place.c	/^free_fast_cost_update_structs(void)$/;"	f	file:
free_hash_table	SRC/hash.c	/^free_hash_table(struct s_hash **hash_table)$/;"	f
free_heap_data	SRC/route_common.c	/^free_heap_data(struct s_heap *hptr)$/;"	f
free_int_list	SRC/util.c	/^free_int_list(t_linked_int ** int_list_head_ptr)$/;"	f
free_ivec_matrix	SRC/util.c	/^free_ivec_matrix(struct s_ivec **ivec_matrix,$/;"	f
free_ivec_matrix3	SRC/util.c	/^free_ivec_matrix3(struct s_ivec ***ivec_matrix3,$/;"	f
free_ivec_vector	SRC/util.c	/^free_ivec_vector(struct s_ivec *ivec_vector,$/;"	f
free_linked_rc_edge	SRC/net_delay.c	/^free_linked_rc_edge(t_linked_rc_edge * rc_edge,$/;"	f	file:
free_linked_rt_edge	SRC/route_tree_timing.c	/^free_linked_rt_edge(t_linked_rt_edge * rt_edge)$/;"	f	file:
free_lookups_and_criticalities	SRC/timing_place.c	/^free_lookups_and_criticalities(float ***net_delay,$/;"	f
free_matrix	SRC/util.c	/^free_matrix(void *vptr,$/;"	f
free_matrix3	SRC/util.c	/^free_matrix3(void *vptr,$/;"	f
free_matrix4	SRC/util.c	/^free_matrix4(void *vptr,$/;"	f
free_net_delay	SRC/net_delay.c	/^free_net_delay(float **net_delay,$/;"	f
free_pin_mappings	SRC/path_delay.c	/^free_pin_mappings(int **block_pin_to_tnode,$/;"	f	file:
free_place_lookup_structs	SRC/timing_place_lookup.c	/^free_place_lookup_structs(void)$/;"	f
free_place_regions	SRC/place.c	/^free_place_regions(int num_regions)$/;"	f	file:
free_placement_structs	SRC/place.c	/^free_placement_structs(int place_cost_type,$/;"	f	file:
free_rc_edge_free_list	SRC/net_delay.c	/^free_rc_edge_free_list(t_linked_rc_edge * rc_edge_free_list)$/;"	f	file:
free_rc_node	SRC/net_delay.c	/^free_rc_node(t_rc_node * rc_node,$/;"	f	file:
free_rc_node_free_list	SRC/net_delay.c	/^free_rc_node_free_list(t_rc_node * rc_node_free_list)$/;"	f	file:
free_rc_tree	SRC/net_delay.c	/^free_rc_tree(t_rc_node * rc_root,$/;"	f	file:
free_route_structs	SRC/route_common.c	/^free_route_structs(t_ivec ** fb_opins_used_locally)$/;"	f
free_route_tree	SRC/route_tree_timing.c	/^free_route_tree(t_rt_node * rt_node)$/;"	f
free_route_tree_timing_structs	SRC/route_tree_timing.c	/^free_route_tree_timing_structs(void)$/;"	f
free_routing_structs	SRC/timing_place_lookup.c	/^free_routing_structs(struct s_router_opts router_opts,$/;"	f	file:
free_rr_graph	SRC/rr_graph.c	/^free_rr_graph(void)$/;"	f
free_rr_node_indices	SRC/rr_graph2.c	/^free_rr_node_indices(IN t_ivec *** rr_node_indices)$/;"	f
free_rr_node_route_structs	SRC/route_common.c	/^free_rr_node_route_structs(void)$/;"	f
free_rt_node	SRC/route_tree_timing.c	/^free_rt_node(t_rt_node * rt_node)$/;"	f	file:
free_saved_routing	SRC/route_common.c	/^free_saved_routing(struct s_trace **best_routing,$/;"	f
free_sblock_pattern_lookup	SRC/rr_graph2.c	/^free_sblock_pattern_lookup(INOUT short *****sblock_pattern)$/;"	f
free_seg_details	SRC/rr_graph2.c	/^free_seg_details(t_seg_details * seg_details,$/;"	f
free_subblock_data	SRC/place_and_route.c	/^free_subblock_data(t_subblock_data * subblock_data_ptr)$/;"	f
free_switch_block_conn	SRC/rr_graph_sbox.c	/^free_switch_block_conn(struct s_ivec ***switch_block_conn,$/;"	f
free_timing_driven_route_structs	SRC/route_timing.c	/^free_timing_driven_route_structs(float *pin_criticality,$/;"	f
free_timing_graph	SRC/path_delay.c	/^free_timing_graph(float **net_slack)$/;"	f
free_trace_data	SRC/route_common.c	/^free_trace_data(struct s_trace *tptr)$/;"	f	file:
free_trace_structs	SRC/route_common.c	/^free_trace_structs(void)$/;"	f
free_traceback	SRC/route_common.c	/^free_traceback(int inet)$/;"	f
free_type_pin_to_track_map	SRC/rr_graph.c	/^free_type_pin_to_track_map(int***** ipin_to_track_map, t_type_ptr types, int* fc_in)$/;"	f	file:
free_type_track_to_ipin_map	SRC/rr_graph.c	/^free_type_track_to_ipin_map(struct s_ivec**** track_to_pin_map, t_type_ptr types, int nodes_per_chan)$/;"	f	file:
free_unique_pin_list	SRC/place.c	/^free_unique_pin_list(void)$/;"	f	file:
frequency	SRC/vpr_types.h	/^    int frequency;$/;"	m	struct:s_segment_inf
from_node	SRC/mst.h	/^    unsigned short int from_node;$/;"	m	struct:s_mst_edge
fs	SRC/place_and_route.h	/^    int fs;			\/* at this fs *\/$/;"	m	struct:s_fmap_cell
full_stats	SRC/vpr_types.h	/^	boolean full_stats;$/;"	m	struct:s_router_opts
gc	SRC/graphics.c	/^static GC gc, gcxor, gc_menus;$/;"	v	file:
gc_menus	SRC/graphics.c	/^static GC gc, gcxor, gc_menus;$/;"	v	file:
gcxor	SRC/graphics.c	/^static GC gc, gcxor, gc_menus;$/;"	v	file:
generic_compute_matrix	SRC/timing_place_lookup.c	/^generic_compute_matrix(float ***matrix_ptr,$/;"	f	file:
get_average_opin_delay	SRC/rr_graph_indexed_data.c	/^get_average_opin_delay(t_ivec *** rr_node_indices,$/;"	f	file:
get_bb_from_scratch	SRC/place.c	/^get_bb_from_scratch(int inet,$/;"	f	file:
get_bidir_opin_connections	SRC/rr_graph2.c	/^get_bidir_opin_connections(IN int i,$/;"	f
get_bidir_track_to_chan_seg	SRC/rr_graph2.c	/^get_bidir_track_to_chan_seg(IN struct s_ivec conn_tracks,$/;"	f	file:
get_block_center	SRC/draw.c	/^get_block_center(int bnum,$/;"	f	file:
get_cblock_trans	SRC/rr_graph_area.c	/^get_cblock_trans(int *num_inputs_to_cblock,$/;"	f	file:
get_channel_occupancy_stats	SRC/stats.c	/^get_channel_occupancy_stats(void)$/;"	f	file:
get_class_range_for_block	SRC/vpr_utils.c	/^get_class_range_for_block(IN int iblk,$/;"	f
get_delay_normalization_fac	SRC/rr_graph_indexed_data.c	/^get_delay_normalization_fac(int nodes_per_chan,$/;"	f	file:
get_directed_search_expected_cost	SRC/route_directed_search.c	/^get_directed_search_expected_cost(int inode,$/;"	f	file:
get_expected_segs_to_target	SRC/route_directed_search.c	/^get_expected_segs_to_target(int inode,$/;"	f	file:
get_expected_segs_to_target	SRC/route_timing.c	/^get_expected_segs_to_target(int inode,$/;"	f	file:
get_first_pin	SRC/timing_place_lookup.c	/^get_first_pin(enum e_pin_type pintype,$/;"	f	file:
get_hash_entry	SRC/hash.c	/^get_hash_entry(struct s_hash **hash_table,$/;"	f
get_heap_head	SRC/route_common.c	/^get_heap_head(void)$/;"	f
get_length_and_bends_stats	SRC/stats.c	/^get_length_and_bends_stats(void)$/;"	f	file:
get_longest_segment_length	SRC/timing_place_lookup.c	/^get_longest_segment_length(struct s_det_routing_arch det_routing_arch,$/;"	f	file:
get_max_pins_per_net	SRC/route_timing.c	/^get_max_pins_per_net(void)$/;"	f	file:
get_mst_of_net	SRC/mst.c	/^get_mst_of_net(int inet)$/;"	f
get_net_cost	SRC/place.c	/^get_net_cost(int inet,$/;"	f	file:
get_net_wirelength_estimate	SRC/place.c	/^get_net_wirelength_estimate(int inet,$/;"	f	file:
get_next_hash	SRC/hash.c	/^get_next_hash(struct s_hash **hash_table,$/;"	f
get_non_updateable_bb	SRC/place.c	/^get_non_updateable_bb(int inet,$/;"	f	file:
get_num_bends_and_length	SRC/stats.c	/^get_num_bends_and_length(int inet,$/;"	f	file:
get_num_conn	SRC/check_netlist.c	/^get_num_conn(int bnum)$/;"	f	file:
get_rr_cong_cost	SRC/route_common.c	/^get_rr_cong_cost(int inode)$/;"	f
get_rr_node_index	SRC/rr_graph2.c	/^get_rr_node_index(int x,$/;"	f
get_rr_pin_draw_coords	SRC/draw.c	/^get_rr_pin_draw_coords(int inode,$/;"	f	file:
get_seg_end	SRC/rr_graph2.c	/^get_seg_end(IN t_seg_details * seg_details,$/;"	f
get_seg_start	SRC/rr_graph2.c	/^get_seg_start(IN t_seg_details * seg_details,$/;"	f
get_seg_track_counts	SRC/rr_graph2.c	/^get_seg_track_counts(IN int num_sets,$/;"	f	file:
get_segment_usage_stats	SRC/segment_stats.c	/^get_segment_usage_stats(int num_segment,$/;"	f
get_serial_num	SRC/route_common.c	/^get_serial_num(void)$/;"	f
get_simple_switch_block_track	SRC/rr_graph_sbox.c	/^get_simple_switch_block_track(IN enum e_side from_side,$/;"	f
get_std_dev	SRC/place.c	/^get_std_dev(int n,$/;"	f	file:
get_switch_type	SRC/rr_graph2.c	/^get_switch_type(boolean is_from_sbox,$/;"	f	file:
get_timing_driven_expected_cost	SRC/route_timing.c	/^get_timing_driven_expected_cost(int inode,$/;"	f	file:
get_tnode_block_and_output_net	SRC/path_delay.c	/^get_tnode_block_and_output_net(int inode,$/;"	f
get_top_of_heap_index	SRC/heapsort.c	/^get_top_of_heap_index(int *heap,$/;"	f	file:
get_track_num	SRC/draw.c	/^get_track_num(int inode,$/;"	f	file:
get_track_to_ipins	SRC/rr_graph2.c	/^get_track_to_ipins(int seg,$/;"	f
get_track_to_tracks	SRC/rr_graph2.c	/^get_track_to_tracks(IN int from_chan,$/;"	f
get_type_by_name	SRC/read_netlist.c	/^get_type_by_name(IN const char *name,$/;"	f	file:
get_unidir_opin_connections	SRC/rr_graph2.c	/^get_unidir_opin_connections(IN int chan,$/;"	f
get_unidir_track_to_chan_seg	SRC/rr_graph2.c	/^get_unidir_track_to_chan_seg(IN boolean is_end_sb,$/;"	f	file:
global_route_switch	SRC/vpr_types.h	/^    short global_route_switch;$/;"	m	struct:s_det_routing_arch
gr_automode	SRC/draw.c	/^static int gr_automode;		\/* Need user input after: 0: each t,   *$/;"	v	file:
grid	SRC/globals_declare.h	/^struct s_grid_tile **grid;$/;"	v	typeref:struct:s_grid_tile
grid	SRC/main.c	/^struct s_grid_tile **grid = NULL;	\/* [0..(nx+1)][0..(ny+1)] Physical block list *\/$/;"	v	typeref:struct:s_grid_tile
grid_backup	SRC/timing_place_lookup.c	/^static struct s_grid_tile **grid_backup;$/;"	v	typeref:struct:s_grid_tile	file:
grid_loc_def	SRC/vpr_types.h	/^    struct s_grid_loc_def *grid_loc_def;	\/* [0..num_def-1] *\/$/;"	m	struct:s_type_descriptor	typeref:struct:s_type_descriptor::s_grid_loc_def
grid_loc_type	SRC/vpr_types.h	/^    enum e_grid_loc_type grid_loc_type;$/;"	m	struct:s_grid_loc_def	typeref:enum:s_grid_loc_def::e_grid_loc_type
grid_logic_tile_area	SRC/main.c	/^float grid_logic_tile_area = 0;$/;"	v
grid_logic_tile_area	SRC/xml_arch.h	/^     float grid_logic_tile_area;$/;"	m	struct:s_arch
group_size	SRC/vpr_types.h	/^    int group_size;$/;"	m	struct:s_seg_details
group_start	SRC/vpr_types.h	/^    int group_start;$/;"	m	struct:s_seg_details
h_ptr	SRC/hash.h	/^    struct s_hash *h_ptr;$/;"	m	struct:s_hash_iterator	typeref:struct:s_hash_iterator::s_hash
hash_value	SRC/hash.c	/^hash_value(char *name)$/;"	f	file:
heap	SRC/route_common.c	/^static struct s_heap **heap;	\/* Indexed from [1..heap_size] *\/$/;"	v	typeref:struct:s_heap	file:
heap_free_head	SRC/route_common.c	/^static struct s_heap *heap_free_head = NULL;$/;"	v	typeref:struct:s_heap	file:
heap_size	SRC/route_common.c	/^static int heap_size;		\/* Number of slots in the heap array *\/$/;"	v	file:
heap_tail	SRC/route_common.c	/^static int heap_tail;		\/* Index of first unused slot in the heap array *\/$/;"	v	file:
heapsort	SRC/heapsort.c	/^heapsort(int *sort_index,$/;"	f
height	SRC/graphics.c	/^    int height;$/;"	m	struct:__anon5	file:
height	SRC/vpr_types.h	/^    int height;$/;"	m	struct:s_type_descriptor
highlight_blocks	SRC/draw.c	/^highlight_blocks(float x,$/;"	f	file:
highlight_crit_path	SRC/draw.c	/^highlight_crit_path(void (*drawscreen_ptr) (void))$/;"	f	file:
i	SRC/hash.h	/^    int i;$/;"	m	struct:s_hash_iterator
iblk	SRC/path_delay2.h	/^    int iblk;$/;"	m	struct:__anon9
index	SRC/hash.h	/^    int index;$/;"	m	struct:s_hash
index	SRC/route_common.h	/^    int index;$/;"	m	struct:s_heap
index	SRC/vpr_types.h	/^    int index;			\/* index of type descriptor in array (allows for index referencing) *\/$/;"	m	struct:s_type_descriptor
index	SRC/vpr_types.h	/^    int index;$/;"	m	struct:s_seg_details
index	SRC/vpr_types.h	/^    int index;$/;"	m	struct:s_trace
init_chan	SRC/place_and_route.c	/^init_chan(int cfactor,$/;"	f
init_draw_coords	SRC/draw.c	/^init_draw_coords(float width_val)$/;"	f
init_graphics	SRC/graphics.c	/^init_graphics(char *window_name)$/;"	f
init_postscript	SRC/graphics.c	/^init_postscript(char *fname)$/;"	f
init_route_structs	SRC/route_common.c	/^init_route_structs(int bb_factor)$/;"	f
init_route_tree_to_source	SRC/route_tree_timing.c	/^init_route_tree_to_source(int inet)$/;"	f
init_t	SRC/vpr_types.h	/^    float init_t;$/;"	m	struct:s_annealing_sched
init_world	SRC/graphics.c	/^init_world(float x1,$/;"	f
init_world	SRC/graphics.c	/^init_world(float xl,$/;"	f
initial_placement	SRC/place.c	/^initial_placement(enum e_pad_loc_type pad_loc_type,$/;"	f	file:
initial_pres_fac	SRC/ReadOptions.h	/^	float initial_pres_fac;$/;"	m	struct:s_options
initial_pres_fac	SRC/vpr_types.h	/^    float initial_pres_fac;$/;"	m	struct:s_router_opts
inner_loop_recompute_divider	SRC/ReadOptions.h	/^	int inner_loop_recompute_divider;$/;"	m	struct:s_options
inner_loop_recompute_divider	SRC/vpr_types.h	/^    int inner_loop_recompute_divider;$/;"	m	struct:s_placer_opts
inner_num	SRC/vpr_types.h	/^    float inner_num;$/;"	m	struct:s_annealing_sched
inode	SRC/net_delay.c	/^    int inode;$/;"	m	struct:s_rc_node	file:
inode	SRC/route_tree_timing.h	/^    int inode;$/;"	m	struct:s_rt_node
inputs	SRC/vpr_types.h	/^    int *inputs;$/;"	m	struct:s_subblock
insert_in_edge_list	SRC/rr_graph_util.c	/^insert_in_edge_list(IN t_linked_edge * head,$/;"	f
insert_in_hash_table	SRC/hash.c	/^insert_in_hash_table(struct s_hash **hash_table,$/;"	f
insert_in_int_list	SRC/util.c	/^insert_in_int_list(t_linked_int * head,$/;"	f
insert_in_vptr_list	SRC/util.c	/^insert_in_vptr_list(struct s_linked_vptr *head,$/;"	f
inv_capacity	SRC/vpr_types.h	/^    float inv_capacity;$/;"	m	struct:s_place_region
inv_length	SRC/vpr_types.h	/^    float inv_length;$/;"	m	struct:s_rr_indexed_data
invalidate_heap_entries	SRC/route_common.c	/^invalidate_heap_entries(int sink_node,$/;"	f
ipin	SRC/path_delay2.h	/^    short ipin;$/;"	m	struct:__anon9
ipin_mux_trans_size	SRC/main.c	/^float ipin_mux_trans_size = 0;$/;"	v
ipin_mux_trans_size	SRC/xml_arch.h	/^     float ipin_mux_trans_size;$/;"	m	struct:s_arch
is_Fc_frac	SRC/vpr_types.h	/^    boolean is_Fc_frac;$/;"	m	struct:s_type_descriptor
is_Fc_out_full_flex	SRC/vpr_types.h	/^    boolean is_Fc_out_full_flex;$/;"	m	struct:s_type_descriptor
is_cbox	SRC/rr_graph2.c	/^is_cbox(IN int chan,$/;"	f
is_empty_heap	SRC/route_common.c	/^is_empty_heap(void)$/;"	f
is_global	SRC/globals_declare.h	/^boolean *is_global;$/;"	v
is_global	SRC/vpr_types.h	/^    boolean is_global;$/;"	m	struct:s_net
is_global_clock	SRC/path_delay.c	/^is_global_clock(int iblk,$/;"	f	file:
is_global_pin	SRC/vpr_types.h	/^    boolean *is_global_pin;	\/* [0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor
is_opin	SRC/vpr_utils.c	/^is_opin(int ipin,$/;"	f
is_sbox	SRC/rr_graph2.c	/^is_sbox(IN int chan,$/;"	f
ispoly	SRC/graphics.c	/^    int ispoly;$/;"	m	struct:__anon5	file:
ispressed	SRC/graphics.c	/^    int ispressed;$/;"	m	struct:__anon5	file:
istext	SRC/graphics.c	/^    int istext;$/;"	m	struct:__anon5	file:
isubblk	SRC/path_delay2.h	/^    short isubblk;$/;"	m	struct:__anon9
iswitch	SRC/net_delay.c	/^    short iswitch;$/;"	m	struct:s_linked_rc_edge	file:
iswitch	SRC/route_tree_timing.h	/^    short iswitch;$/;"	m	struct:s_linked_rt_edge
iswitch	SRC/rr_graph_util.h	/^    short iswitch;$/;"	m	struct:s_linked_edge
iswitch	SRC/vpr_types.h	/^    short iswitch;$/;"	m	struct:s_trace
label_incoming_wires	SRC/rr_graph2.c	/^label_incoming_wires(IN int chan_num,$/;"	f	file:
label_wire_muxes	SRC/rr_graph2.c	/^label_wire_muxes(IN int chan_num,$/;"	f	file:
label_wire_muxes_for_balance	SRC/rr_graph2.c	/^label_wire_muxes_for_balance(IN int chan_num,$/;"	f	file:
len	SRC/ezxml.c	/^    size_t len;			\/* length of allocated memory for mmap, -1 for malloc *\/$/;"	m	struct:ezxml_root	file:
length	SRC/vpr_types.h	/^    int length;$/;"	m	struct:s_seg_details
length	SRC/vpr_types.h	/^    int length;$/;"	m	struct:s_segment_inf
limit_value	SRC/util.c	/^limit_value(int cur,$/;"	f
line_types	SRC/graphics.h	/^enum line_types$/;"	g
linenum	SRC/util.c	/^int linenum;			\/* Line in file being parsed. *\/$/;"	v
linked_f_pointer_free_head	SRC/route_common.c	/^static struct s_linked_f_pointer *linked_f_pointer_free_head = NULL;$/;"	v	typeref:struct:s_linked_f_pointer	file:
list	SRC/util.h	/^    int *list;$/;"	m	struct:s_ivec
load_chan_rr_indices	SRC/rr_graph2.c	/^load_chan_rr_indices(IN int nodes_per_chan,$/;"	f	file:
load_channel_occupancies	SRC/stats.c	/^load_channel_occupancies(int **chanx_occ,$/;"	f	file:
load_constant_net_delay	SRC/net_delay.c	/^load_constant_net_delay(float **net_delay,$/;"	f
load_criticalities	SRC/timing_place.c	/^load_criticalities(struct s_placer_opts placer_opts,$/;"	f
load_font	SRC/graphics.c	/^load_font(int pointsize)$/;"	f	file:
load_net_delay_from_routing	SRC/net_delay.c	/^load_net_delay_from_routing(float **net_delay)$/;"	f
load_net_rr_terminals	SRC/rr_graph.c	/^load_net_rr_terminals(t_ivec *** rr_node_indices)$/;"	f
load_net_slack	SRC/path_delay.c	/^load_net_slack(float **net_slack,$/;"	f
load_new_path_R_upstream	SRC/route_tree_timing.c	/^load_new_path_R_upstream(t_rt_node * start_of_new_path_rt_node)$/;"	f	file:
load_one_constant_net_delay	SRC/net_delay.c	/^load_one_constant_net_delay(float **net_delay,$/;"	f	file:
load_one_fb_fanout_count	SRC/vpr_utils.c	/^load_one_fb_fanout_count(t_subblock * subblock_inf,$/;"	f
load_one_net_delay	SRC/net_delay.c	/^load_one_net_delay(float **net_delay,$/;"	f	file:
load_perturbed_switch_pattern	SRC/rr_graph.c	/^load_perturbed_switch_pattern(IN t_type_ptr type,$/;"	f	file:
load_place_regions	SRC/place.c	/^load_place_regions(int num_regions)$/;"	f	file:
load_rc_tree_C	SRC/net_delay.c	/^load_rc_tree_C(t_rc_node * rc_node)$/;"	f	file:
load_rc_tree_T	SRC/net_delay.c	/^load_rc_tree_T(t_rc_node * rc_node,$/;"	f	file:
load_route_bb	SRC/route_common.c	/^load_route_bb(int bb_factor)$/;"	f	file:
load_rr_indexed_data_T_values	SRC/rr_graph_indexed_data.c	/^load_rr_indexed_data_T_values(int index_start,$/;"	f	file:
load_rr_indexed_data_base_costs	SRC/rr_graph_indexed_data.c	/^load_rr_indexed_data_base_costs(int nodes_per_chan,$/;"	f	file:
load_rt_subtree_Tdel	SRC/route_tree_timing.c	/^load_rt_subtree_Tdel(t_rt_node * subtree_rt_root,$/;"	f	file:
load_sblock_pattern_lookup	SRC/rr_graph2.c	/^load_sblock_pattern_lookup(IN int i,$/;"	f
load_simplified_device	SRC/timing_place_lookup.c	/^load_simplified_device(void)$/;"	f	file:
load_subblock_info_to_type	SRC/SetupVPR.c	/^load_subblock_info_to_type(INOUT t_subblock_data * subblocks,$/;"	f	file:
load_timing_graph_net_delays	SRC/path_delay.c	/^load_timing_graph_net_delays(float **net_delay)$/;"	f
load_uniform_opin_switch_pattern_paired	SRC/rr_graph.c	/^load_uniform_opin_switch_pattern_paired(IN int *Fc_out,$/;"	f	file:
load_uniform_switch_pattern	SRC/rr_graph.c	/^load_uniform_switch_pattern(IN t_type_ptr type,$/;"	f	file:
longline	SRC/vpr_types.h	/^    boolean longline;$/;"	m	struct:s_seg_details
longline	SRC/vpr_types.h	/^    boolean longline;$/;"	m	struct:s_segment_inf
lookup_dump	SRC/timing_place_lookup.c	/^static FILE *lookup_dump;	\/* If debugging mode is on, print out to$/;"	v	file:
m	SRC/ezxml.c	/^    char *m;			\/* original xml string *\/$/;"	m	struct:ezxml_root	file:
main	SRC/ezxml.c	/^main(int argc,$/;"	f
main	SRC/main.c	/^main(int argc,$/;"	f
main	SRC/testing.c	/^main()$/;"	f
map_button	SRC/graphics.c	/^map_button(int bnum)$/;"	f	file:
mark_ends	SRC/route_common.c	/^mark_ends(int inet)$/;"	f
max	SRC/graphics.c	84;"	d	file:
max	SRC/util.h	31;"	d
max_criticality	SRC/ReadOptions.h	/^	float max_criticality;$/;"	m	struct:s_options
max_criticality	SRC/vpr_types.h	/^    float max_criticality;$/;"	m	struct:s_router_opts
max_index	SRC/rr_graph.c	/^    int max_index;$/;"	m	struct:s_mux_size_distribution	file:
max_router_iterations	SRC/ReadOptions.h	/^	int max_router_iterations;$/;"	m	struct:s_options
max_router_iterations	SRC/vpr_types.h	/^    int max_router_iterations;$/;"	m	struct:s_router_opts
max_subblock_inputs	SRC/vpr_types.h	/^    int max_subblock_inputs;$/;"	m	struct:s_type_descriptor
max_subblock_outputs	SRC/vpr_types.h	/^    int max_subblock_outputs;$/;"	m	struct:s_type_descriptor
max_subblocks	SRC/vpr_types.h	/^    int max_subblocks;$/;"	m	struct:s_type_descriptor
menu	SRC/graphics.c	/^static Window toplevel, menu, textarea;	\/* various windows *\/$/;"	v	file:
menu_font_size	SRC/graphics.c	/^static const int menu_font_size = 14;	\/* Font for menus and dialog boxes. *\/$/;"	v	file:
menutext	SRC/graphics.c	/^menutext(Window win,$/;"	f	file:
message	SRC/graphics.c	/^static char message[BUFSIZE] = "\\0";	\/* User message to display *\/$/;"	v	file:
min	SRC/graphics.c	85;"	d	file:
min	SRC/util.h	32;"	d
min_dist_from_mst	SRC/mst.c	/^min_dist_from_mst(int node_outside,$/;"	f	file:
mux_count	SRC/rr_graph.c	/^    int mux_count;$/;"	m	struct:s_mux_size_distribution	file:
mux_trans_size	SRC/vpr_types.h	/^    float mux_trans_size;$/;"	m	struct:s_switch_inf
my_atoi	SRC/util.c	/^my_atoi(const char *str)$/;"	f
my_calloc	SRC/util.c	/^my_calloc(size_t nelem,$/;"	f
my_chunk_malloc	SRC/util.c	/^my_chunk_malloc(size_t size,$/;"	f
my_fgets	SRC/util.c	/^my_fgets(char *buf,$/;"	f
my_fopen	SRC/util.c	/^my_fopen(const char *fname,$/;"	f
my_frand	SRC/util.c	/^my_frand(void)$/;"	f
my_irand	SRC/util.c	/^my_irand(int imax)$/;"	f
my_malloc	SRC/util.c	/^my_malloc(size_t size)$/;"	f
my_realloc	SRC/util.c	/^my_realloc(void *ptr,$/;"	f
my_srandom	SRC/util.c	/^my_srandom(int seed)$/;"	f
my_strdup	SRC/util.c	/^my_strdup(const char *str)$/;"	f
my_strncpy	SRC/util.c	/^my_strncpy(char *dest,$/;"	f
my_strtok	SRC/util.c	/^my_strtok(char *ptr,$/;"	f
name	SRC/ezxml.h	/^	char *name;		\/* tag name *\/$/;"	m	struct:ezxml
name	SRC/hash.h	/^    char *name;$/;"	m	struct:s_hash
name	SRC/vpr_types.h	/^    char *name;$/;"	m	struct:s_block
name	SRC/vpr_types.h	/^    char *name;$/;"	m	struct:s_net
name	SRC/vpr_types.h	/^    char *name;$/;"	m	struct:s_subblock
name	SRC/vpr_types.h	/^    char *name;$/;"	m	struct:s_switch_inf
name	SRC/vpr_types.h	/^    const char *name;$/;"	m	struct:s_type_descriptor
nelem	SRC/util.h	/^    int nelem;$/;"	m	struct:s_ivec
net	SRC/globals_declare.h	/^struct s_net *net;$/;"	v	typeref:struct:s_net
net	SRC/main.c	/^struct s_net *net = NULL;$/;"	v	typeref:struct:s_net
net_color	SRC/draw.c	/^static enum color_types *net_color, *block_color;$/;"	v	typeref:enum:color_types	file:
net_cost	SRC/place.c	/^static float *net_cost = NULL, *temp_net_cost = NULL;	\/* [0..num_nets-1] *\/$/;"	v	file:
net_delay	SRC/timing_place_lookup.c	/^static float **net_delay;$/;"	v	file:
net_delay_chunk_list_head	SRC/timing_place.c	/^static struct s_linked_vptr *net_delay_chunk_list_head;$/;"	v	typeref:struct:s_linked_vptr	file:
net_pin_index	SRC/place.c	/^static int **net_pin_index = NULL;$/;"	v	file:
net_rr_terminals	SRC/globals_declare.h	/^int **net_rr_terminals;		\/* [0..num_nets-1][0..num_pins-1] *\/$/;"	v
net_rr_terminals	SRC/main.c	/^int **net_rr_terminals = NULL;	\/* [0..num_nets-1][0..num_pins-1] *\/$/;"	v
net_slack	SRC/timing_place_lookup.c	/^static float **net_slack;$/;"	v	file:
net_to_driver_tnode	SRC/path_delay2.c	/^int *net_to_driver_tnode;$/;"	v
nets	SRC/vpr_types.h	/^    int *nets;$/;"	m	struct:s_block
next	SRC/ezxml.h	/^	ezxml_t next;		\/* next tag with same name in this section at this depth *\/$/;"	m	struct:ezxml
next	SRC/hash.h	/^    struct s_hash *next;$/;"	m	struct:s_hash	typeref:struct:s_hash::s_hash
next	SRC/net_delay.c	/^	struct s_rc_node *next;$/;"	m	union:s_rc_node::__anon1	typeref:struct:s_rc_node::__anon1::s_rc_node	file:
next	SRC/net_delay.c	/^    struct s_linked_rc_edge *next;$/;"	m	struct:s_linked_rc_edge	typeref:struct:s_linked_rc_edge::s_linked_rc_edge	file:
next	SRC/net_delay.c	/^    struct s_linked_rc_ptr *next;$/;"	m	struct:s_linked_rc_ptr	typeref:struct:s_linked_rc_ptr::s_linked_rc_ptr	file:
next	SRC/place_and_route.h	/^    struct s_fmap_cell *next;$/;"	m	struct:s_fmap_cell	typeref:struct:s_fmap_cell::s_fmap_cell
next	SRC/route_common.h	/^	struct s_heap *next;$/;"	m	union:s_heap::__anon10	typeref:struct:s_heap::__anon10::s_heap
next	SRC/route_tree_timing.h	/^	struct s_rt_node *next;$/;"	m	union:s_rt_node::__anon12	typeref:struct:s_rt_node::__anon12::s_rt_node
next	SRC/route_tree_timing.h	/^    struct s_linked_rt_edge *next;$/;"	m	struct:s_linked_rt_edge	typeref:struct:s_linked_rt_edge::s_linked_rt_edge
next	SRC/rr_graph.c	/^    struct s_mux *next;$/;"	m	struct:s_mux	typeref:struct:s_mux::s_mux	file:
next	SRC/rr_graph.c	/^    struct s_mux_size_distribution *next;$/;"	m	struct:s_mux_size_distribution	typeref:struct:s_mux_size_distribution::s_mux_size_distribution	file:
next	SRC/rr_graph_util.h	/^    struct s_linked_edge *next;$/;"	m	struct:s_linked_edge	typeref:struct:s_linked_edge::s_linked_edge
next	SRC/util.h	/^    struct s_linked_int *next;$/;"	m	struct:s_linked_int	typeref:struct:s_linked_int::s_linked_int
next	SRC/util.h	/^    struct s_linked_vptr *next;$/;"	m	struct:s_linked_vptr	typeref:struct:s_linked_vptr::s_linked_vptr
next	SRC/vpr_types.h	/^    struct s_linked_f_pointer *next;$/;"	m	struct:s_linked_f_pointer	typeref:struct:s_linked_f_pointer::s_linked_f_pointer
next	SRC/vpr_types.h	/^    struct s_trace *next;$/;"	m	struct:s_trace	typeref:struct:s_trace::s_trace
nint	SRC/util.h	34;"	d
node_block	SRC/vpr_types.h	/^    int *node_block;$/;"	m	struct:s_net
node_block_pin	SRC/vpr_types.h	/^    int *node_block_pin;$/;"	m	struct:s_net
node_to_heap	SRC/route_common.c	/^node_to_heap(int inode,$/;"	f
nonlinear_cong_cost	SRC/place.c	/^nonlinear_cong_cost(int num_regions)$/;"	f	file:
num_blocks	SRC/globals_declare.h	/^int num_nets, num_blocks;$/;"	v
num_blocks	SRC/main.c	/^int num_blocks = 0;$/;"	v
num_buttons	SRC/graphics.c	/^static int num_buttons;		\/* Number of menu buttons *\/$/;"	v	file:
num_class	SRC/vpr_types.h	/^    int num_class;$/;"	m	struct:s_type_descriptor
num_const_gen	SRC/vpr_types.h	/^    int num_const_gen;$/;"	m	struct:s_subblock_data
num_drivers	SRC/vpr_types.h	/^    int num_drivers;$/;"	m	struct:s_type_descriptor
num_edges	SRC/path_delay2.h	/^    int num_edges;$/;"	m	struct:__anon7
num_edges	SRC/vpr_types.h	/^    short num_edges;$/;"	m	struct:s_rr_node
num_ff	SRC/vpr_types.h	/^    int num_ff;$/;"	m	struct:s_subblock_data
num_grid_loc_def	SRC/vpr_types.h	/^    int num_grid_loc_def;$/;"	m	struct:s_type_descriptor
num_heap_allocated	SRC/route_common.c	/^static int num_heap_allocated = 0;$/;"	v	file:
num_linked_f_pointer_allocated	SRC/route_common.c	/^static int num_linked_f_pointer_allocated = 0;$/;"	v	file:
num_nets	SRC/globals_declare.h	/^int num_nets, num_blocks;$/;"	v
num_nets	SRC/main.c	/^int num_nets = 0;$/;"	v
num_opin_drivers	SRC/vpr_types.h	/^    int num_opin_drivers;	\/* UDSD by WMF (could use "short") *\/$/;"	m	struct:s_rr_node
num_pins	SRC/vpr_types.h	/^    int num_pins;$/;"	m	struct:s_class
num_pins	SRC/vpr_types.h	/^    int num_pins;$/;"	m	struct:s_type_descriptor
num_receivers	SRC/vpr_types.h	/^    int num_receivers;$/;"	m	struct:s_type_descriptor
num_regions	SRC/vpr_types.h	/^    int num_regions;$/;"	m	struct:s_placer_opts
num_rp	SRC/place_stats.c	/^    int num_rp[MAX_LEN];$/;"	m	struct:relapos_rec_s	file:
num_rr_indexed_data	SRC/globals_declare.h	/^int num_rr_indexed_data;$/;"	v
num_rr_indexed_data	SRC/main.c	/^int num_rr_indexed_data = 0;$/;"	v
num_rr_nodes	SRC/globals_declare.h	/^int num_rr_nodes;$/;"	v
num_rr_nodes	SRC/main.c	/^int num_rr_nodes = 0;$/;"	v
num_segment	SRC/vpr_types.h	/^    int num_segment;$/;"	m	struct:s_det_routing_arch
num_segments	SRC/xml_arch.h	/^     int num_segments;$/;"	m	struct:s_arch
num_sinks	SRC/vpr_types.h	/^    int num_sinks;$/;"	m	struct:s_net
num_subblocks_per_block	SRC/vpr_types.h	/^    int *num_subblocks_per_block;$/;"	m	struct:s_subblock_data
num_switch	SRC/vpr_types.h	/^    short num_switch;$/;"	m	struct:s_det_routing_arch
num_switches	SRC/xml_arch.h	/^     int num_switches;$/;"	m	struct:s_arch
num_tnode_levels	SRC/path_delay2.c	/^int num_tnode_levels;		\/* Number of levels in the timing graph. *\/$/;"	v
num_tnodes	SRC/path_delay2.c	/^int num_tnodes;			\/* Number of nodes (pins) in the timing graph *\/$/;"	v
num_trace_allocated	SRC/route_common.c	/^static int num_trace_allocated = 0;	\/* To watch for memory leaks. *\/$/;"	v	file:
num_types	SRC/main.c	/^int num_types = 0;$/;"	v
num_types_backup	SRC/timing_place_lookup.c	/^static int num_types_backup;$/;"	v	file:
num_wire_drivers	SRC/vpr_types.h	/^    int num_wire_drivers;	\/* UDSD by WMF *\/$/;"	m	struct:s_rr_node
nx	SRC/globals_declare.h	/^int nx, ny;$/;"	v
nx	SRC/main.c	/^int nx = 0;$/;"	v
ny	SRC/globals_declare.h	/^int nx, ny;$/;"	v
ny	SRC/main.c	/^int ny = 0;$/;"	v
occ	SRC/vpr_types.h	/^    short occ;$/;"	m	struct:s_rr_node
occupancy	SRC/vpr_types.h	/^    float occupancy;$/;"	m	struct:s_place_region
off	SRC/ezxml.h	/^	size_t off;		\/* tag offset from start of parent tag character content *\/$/;"	m	struct:ezxml
offset	SRC/vpr_types.h	/^    int offset;$/;"	m	struct:s_grid_tile
open	SRC/ezxml.c	58;"	d	file:
opin_switch	SRC/vpr_types.h	/^    short opin_switch;$/;"	m	struct:s_seg_details
opin_switch	SRC/vpr_types.h	/^    short opin_switch;$/;"	m	struct:s_segment_inf
ordered	SRC/ezxml.h	/^	ezxml_t ordered;	\/* next tag, same section and depth, in original order *\/$/;"	m	struct:ezxml
ortho_cost_index	SRC/vpr_types.h	/^    int ortho_cost_index;$/;"	m	struct:s_rr_indexed_data
out_edges	SRC/path_delay2.h	/^    t_tedge *out_edges;$/;"	m	struct:__anon7
outputs	SRC/vpr_types.h	/^    int *outputs;$/;"	m	struct:s_subblock
pad_loc_file	SRC/vpr_types.h	/^    char *pad_loc_file;$/;"	m	struct:s_placer_opts
pad_loc_type	SRC/vpr_types.h	/^    enum e_pad_loc_type pad_loc_type;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::e_pad_loc_type
parent	SRC/ezxml.h	/^	ezxml_t parent;		\/* parent tag, NULL if current tag is root tag *\/$/;"	m	struct:ezxml
parent_node	SRC/route_tree_timing.h	/^    struct s_rt_node *parent_node;$/;"	m	struct:s_rt_node	typeref:struct:s_rt_node::s_rt_node
parent_switch	SRC/route_tree_timing.h	/^    short parent_switch;$/;"	m	struct:s_rt_node
path_cost	SRC/route_common.h	/^    float path_cost;$/;"	m	struct:__anon11
pathfinder_update_cost	SRC/route_common.c	/^pathfinder_update_cost(float pres_fac,$/;"	f
pathfinder_update_one_cost	SRC/route_common.c	/^pathfinder_update_one_cost(struct s_trace *route_segment_start,$/;"	f
peak	SRC/vpr_types.h	/^    float peak;$/;"	m	struct:s_chan
pfreq	SRC/vpr_types.h	/^enum pfreq$/;"	g
pi	SRC/ezxml.c	/^    char ***pi;			\/* processing instructions *\/$/;"	m	struct:ezxml_root	file:
pic_on_screen	SRC/draw.c	/^static enum pic_type pic_on_screen = NO_PICTURE;	\/* What do I draw? *\/$/;"	v	typeref:enum:pic_type	file:
pic_type	SRC/vpr_types.h	/^enum pic_type$/;"	g
pin_and_chan_adjacent	SRC/check_route.c	/^pin_and_chan_adjacent(int pin_node,$/;"	f	file:
pin_class	SRC/vpr_types.h	/^    int *pin_class;		\/* [0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor
pin_criticality	SRC/timing_place_lookup.c	/^static float *pin_criticality;$/;"	v	file:
pin_size	SRC/draw.c	/^static float tile_width, pin_size;$/;"	v	file:
pinlist	SRC/vpr_types.h	/^    int *pinlist;$/;"	m	struct:s_class
pinlist_str	SRC/read_netlist.c	/^static char *pinlist_str = "pinlist:";$/;"	v	file:
pinloc	SRC/vpr_types.h	/^    int ***pinloc;		\/* [0..height-1][0..3][0..num_pins-1] *\/$/;"	m	struct:s_type_descriptor
place_algorithm	SRC/vpr_types.h	/^    enum e_place_algorithm place_algorithm;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::e_place_algorithm
place_and_route	SRC/place_and_route.c	/^place_and_route(enum e_operation operation,$/;"	f
place_c_types	SRC/vpr_types.h	/^enum place_c_types$/;"	g
place_chan_width	SRC/vpr_types.h	/^    int place_chan_width;$/;"	m	struct:s_placer_opts
place_cost_exp	SRC/ReadOptions.h	/^	float place_cost_exp;$/;"	m	struct:s_options
place_cost_exp	SRC/vpr_types.h	/^    float place_cost_exp;$/;"	m	struct:s_placer_opts
place_cost_type	SRC/vpr_types.h	/^    enum place_c_types place_cost_type;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::place_c_types
place_exp_first	SRC/ReadOptions.h	/^	float place_exp_first;$/;"	m	struct:s_options
place_exp_last	SRC/ReadOptions.h	/^	float place_exp_last;$/;"	m	struct:s_options
place_freq	SRC/vpr_types.h	/^    enum pfreq place_freq;$/;"	m	struct:s_placer_opts	typeref:enum:s_placer_opts::pfreq
place_region_bounds_x	SRC/place.c	/^static float *place_region_bounds_x, *place_region_bounds_y;$/;"	v	file:
place_region_bounds_y	SRC/place.c	/^static float *place_region_bounds_x, *place_region_bounds_y;$/;"	v	file:
place_region_x	SRC/place.c	/^static struct s_place_region **place_region_x, **place_region_y;$/;"	v	typeref:struct:s_place_region	file:
place_region_y	SRC/place.c	/^static struct s_place_region **place_region_x, **place_region_y;$/;"	v	typeref:struct:	file:
point_to_point_delay_cost	SRC/place.c	/^static float **point_to_point_delay_cost = NULL;$/;"	v	file:
point_to_point_timing_cost	SRC/place.c	/^static float **point_to_point_timing_cost = NULL;$/;"	v	file:
poly	SRC/graphics.c	/^    int poly[3][2];$/;"	m	struct:__anon5	file:
post_place_sync	SRC/place_and_route.c	/^post_place_sync(IN int num_blocks,$/;"	f
postscript	SRC/graphics.c	/^postscript(void (*drawscreen) (void))$/;"	f	file:
pres_cost	SRC/route_common.h	/^    float pres_cost;$/;"	m	struct:__anon11
pres_fac_mult	SRC/ReadOptions.h	/^	float pres_fac_mult;$/;"	m	struct:s_options
pres_fac_mult	SRC/vpr_types.h	/^    float pres_fac_mult;$/;"	m	struct:s_router_opts
prev_edge	SRC/route_common.h	/^    int prev_edge;$/;"	m	struct:s_heap
prev_edge	SRC/route_common.h	/^    short prev_edge;$/;"	m	struct:__anon11
prev_node	SRC/route_common.h	/^	int prev_node;$/;"	m	union:s_heap::__anon10
prev_node	SRC/route_common.h	/^    int prev_node;$/;"	m	struct:__anon11
print_array	SRC/timing_place_lookup.c	/^print_array(float **array_to_print,$/;"	f	file:
print_critical_path	SRC/path_delay.c	/^print_critical_path(char *fname,$/;"	f
print_critical_path_node	SRC/path_delay2.c	/^print_critical_path_node(FILE * fp,$/;"	f
print_distribution	SRC/rr_graph.c	/^print_distribution(FILE * fptr,$/;"	f	file:
print_int_matrix3	SRC/util.c	/^print_int_matrix3(int ***vptr,$/;"	f
print_lambda	SRC/stats.c	/^print_lambda(void)$/;"	f
print_net_delay	SRC/net_delay.c	/^print_net_delay(float **net_delay,$/;"	f
print_net_slack	SRC/path_delay.c	/^print_net_slack(char *fname,$/;"	f
print_netlist	SRC/print_netlist.c	/^print_netlist(char *foutput,$/;"	f
print_pinnum	SRC/print_netlist.c	/^print_pinnum(FILE * fp,$/;"	f	file:
print_place	SRC/read_place.c	/^print_place(char *place_file,$/;"	f
print_relative_pos_distr	SRC/place_stats.c	/^print_relative_pos_distr(void)$/;"	f
print_route	SRC/route_common.c	/^print_route(char *route_file)$/;"	f
print_rr_indexed_data	SRC/rr_graph.c	/^print_rr_indexed_data(FILE * fp,$/;"	f
print_rr_node	SRC/rr_graph.c	/^print_rr_node(FILE * fp,$/;"	f	file:
print_sink_delays	SRC/timing_place.c	/^print_sink_delays(char *fname)$/;"	f
print_timing_graph	SRC/path_delay.c	/^print_timing_graph(char *fname)$/;"	f
print_wirelen_prob_dist	SRC/stats.c	/^print_wirelen_prob_dist(void)$/;"	f
priority	SRC/vpr_types.h	/^    int priority;$/;"	m	struct:s_grid_loc_def
private_cmap	SRC/graphics.c	/^static Colormap private_cmap;	\/* "None" unless a private cmap was allocated. *\/$/;"	v	file:
proc_time	SRC/place_and_route.h	/^    int proc_time;$/;"	m	struct:s_fmap_cell
proceed	SRC/graphics.c	/^proceed(void (*drawscreen) (void))$/;"	f	file:
ps	SRC/graphics.c	/^static FILE *ps;$/;"	v	file:
ps_bot	SRC/graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_left	SRC/graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_right	SRC/graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_top	SRC/graphics.c	/^static float ps_left, ps_right, ps_top, ps_bot;	\/* Figure boundaries for *$/;"	v	file:
ps_xmult	SRC/graphics.c	/^static float ps_xmult, ps_ymult;	\/* Transformation for PostScript. *\/$/;"	v	file:
ps_ymult	SRC/graphics.c	/^static float ps_xmult, ps_ymult;	\/* Transformation for PostScript. *\/$/;"	v	file:
ptc_num	SRC/vpr_types.h	/^    short ptc_num;$/;"	m	struct:s_rr_node
quit	SRC/graphics.c	/^quit(void (*drawscreen) (void))$/;"	f	file:
rc_node	SRC/net_delay.c	/^    struct s_rc_node *rc_node;$/;"	m	struct:s_linked_rc_ptr	typeref:struct:s_linked_rc_ptr::s_rc_node	file:
re_expand	SRC/route_tree_timing.h	/^    short re_expand;$/;"	m	struct:s_rt_node
read	SRC/ezxml.c	59;"	d	file:
read_netlist	SRC/read_netlist.c	/^read_netlist(IN const char *net_file,$/;"	f
read_place	SRC/read_place.c	/^read_place(IN const char *place_file,$/;"	f
read_user_pad_loc	SRC/read_place.c	/^read_user_pad_loc(char *pad_loc_file)$/;"	f
recompute_bb_cost	SRC/place.c	/^recompute_bb_cost(int place_cost_type,$/;"	f	file:
recompute_crit_iter	SRC/vpr_types.h	/^    int recompute_crit_iter;$/;"	m	struct:s_placer_opts
recompute_occupancy_from_scratch	SRC/check_route.c	/^recompute_occupancy_from_scratch(t_ivec ** fb_opins_used_locally)$/;"	f	file:
rect_off_screen	SRC/graphics.c	/^rect_off_screen(float x1,$/;"	f	file:
redraw_screen	SRC/draw.c	/^redraw_screen()$/;"	f	file:
relapos_rec_s	SRC/place_stats.c	/^typedef struct relapos_rec_s$/;"	s	file:
relapos_rec_t	SRC/place_stats.c	/^relapos_rec_t;$/;"	t	typeref:struct:relapos_rec_s	file:
repeat	SRC/vpr_types.h	/^    int repeat;$/;"	m	struct:s_grid_loc_def
reserve_locally_used_opins	SRC/route_common.c	/^reserve_locally_used_opins(float pres_fac,$/;"	f
reset_flags	SRC/check_route.c	/^reset_flags(int inet,$/;"	f	file:
reset_path_costs	SRC/route_common.c	/^reset_path_costs(void)$/;"	f
reset_placement	SRC/timing_place_lookup.c	/^reset_placement(void)$/;"	f	file:
reset_rr_node_to_rc_node	SRC/net_delay.c	/^reset_rr_node_to_rc_node(t_linked_rc_ptr * rr_node_to_rc_node,$/;"	f	file:
restore_original_device	SRC/timing_place_lookup.c	/^restore_original_device(void)$/;"	f	file:
restore_region_occ	SRC/place.c	/^restore_region_occ(float **old_region_occ_x,$/;"	f	file:
restore_routing	SRC/route_common.c	/^restore_routing(struct s_trace **best_routing,$/;"	f
route_bb	SRC/route_common.c	/^struct s_bb *route_bb = NULL;	\/* [0..num_nets-1]. Limits area in which each  *\/$/;"	v	typeref:struct:s_bb
route_type	SRC/vpr_types.h	/^    enum e_route_type route_type;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_route_type
router_algorithm	SRC/vpr_types.h	/^    enum e_router_algorithm router_algorithm;$/;"	m	struct:s_router_opts	typeref:enum:s_router_opts::e_router_algorithm
routing_stats	SRC/stats.c	/^routing_stats(boolean full_stats,$/;"	f
rr_blk_source	SRC/globals_declare.h	/^int **rr_blk_source;		\/* [0..num_blocks-1][0..num_class-1] *\/$/;"	v
rr_blk_source	SRC/main.c	/^int **rr_blk_source = NULL;	\/* [0..(num_blocks-1)][0..(num_class-1)] *\/$/;"	v
rr_edge_done	SRC/rr_graph2.c	/^boolean *rr_edge_done;$/;"	v
rr_graph_error	SRC/check_rr_graph.c	/^static boolean rr_graph_error;$/;"	v	file:
rr_graph_externals	SRC/rr_graph.c	/^rr_graph_externals( t_timing_inf timing_inf,$/;"	f	file:
rr_graph_warn	SRC/check_rr_graph.c	/^static boolean rr_graph_warn;$/;"	v	file:
rr_indexed_data	SRC/globals_declare.h	/^t_rr_indexed_data *rr_indexed_data;	\/* [0 .. num_rr_indexed_data-1] *\/$/;"	v
rr_indexed_data	SRC/main.c	/^t_rr_indexed_data *rr_indexed_data = NULL;	\/* [0..(num_rr_indexed_data-1)] *\/$/;"	v
rr_mem_chunk_list_head	SRC/rr_graph.c	/^static struct s_linked_vptr *rr_mem_chunk_list_head = NULL;$/;"	v	typeref:struct:s_linked_vptr	file:
rr_modified_head	SRC/route_common.c	/^static struct s_linked_f_pointer *rr_modified_head = NULL;$/;"	v	typeref:struct:s_linked_f_pointer	file:
rr_node	SRC/globals_declare.h	/^t_rr_node *rr_node;		\/* [0..num_rr_nodes-1]          *\/$/;"	v
rr_node	SRC/main.c	/^t_rr_node *rr_node = NULL;	\/* [0..(num_rr_nodes-1)] *\/$/;"	v
rr_node_indices	SRC/globals_declare.h	/^t_ivec ***rr_node_indices;$/;"	v
rr_node_indices	SRC/main.c	/^t_ivec ***rr_node_indices = NULL;$/;"	v
rr_node_is_global_clb_ipin	SRC/check_rr_graph.c	/^rr_node_is_global_clb_ipin(int inode)$/;"	f	file:
rr_node_route_inf	SRC/route_common.c	/^t_rr_node_route_inf *rr_node_route_inf = NULL;	\/* [0..num_rr_nodes-1] *\/$/;"	v
rr_node_to_rt_node	SRC/route_tree_timing.c	/^static t_rt_node **rr_node_to_rt_node = NULL;	\/* [0..num_rr_nodes-1] *\/$/;"	v	file:
rt_edge_free_list	SRC/route_tree_timing.c	/^static t_linked_rt_edge *rt_edge_free_list = NULL;$/;"	v	file:
rt_node_free_list	SRC/route_tree_timing.c	/^static t_rt_node *rt_node_free_list = NULL;$/;"	v	file:
rt_node_of_sink	SRC/timing_place_lookup.c	/^static t_rt_node **rt_node_of_sink;$/;"	v	file:
s	SRC/ezxml.c	/^    char *s;			\/* start of work area *\/$/;"	m	struct:ezxml_root	file:
s_T_subblock	SRC/vpr_types.h	/^typedef struct s_T_subblock$/;"	s
s_TokenPair	SRC/vpr_types.h	/^struct s_TokenPair$/;"	s
s_annealing_sched	SRC/vpr_types.h	/^struct s_annealing_sched$/;"	s
s_arch	SRC/xml_arch.h	/^struct s_arch$/;"	s
s_bb	SRC/vpr_types.h	/^struct s_bb$/;"	s
s_block	SRC/vpr_types.h	/^struct s_block$/;"	s
s_chan	SRC/vpr_types.h	/^typedef struct s_chan$/;"	s
s_chan_width_dist	SRC/vpr_types.h	/^typedef struct s_chan_width_dist$/;"	s
s_class	SRC/vpr_types.h	/^struct s_class$/;"	s
s_clb_grid	SRC/xml_arch.h	/^    struct s_clb_grid$/;"	s
s_det_routing_arch	SRC/vpr_types.h	/^struct s_det_routing_arch$/;"	s
s_fmap_cell	SRC/place_and_route.h	/^typedef struct s_fmap_cell$/;"	s
s_grid_loc_def	SRC/vpr_types.h	/^struct s_grid_loc_def$/;"	s
s_grid_tile	SRC/vpr_types.h	/^struct s_grid_tile$/;"	s
s_hash	SRC/hash.h	/^struct s_hash$/;"	s
s_hash_iterator	SRC/hash.h	/^struct s_hash_iterator$/;"	s
s_heap	SRC/route_common.h	/^struct s_heap$/;"	s
s_ivec	SRC/util.h	/^struct s_ivec$/;"	s
s_linked_edge	SRC/rr_graph_util.h	/^struct s_linked_edge$/;"	s
s_linked_f_pointer	SRC/vpr_types.h	/^struct s_linked_f_pointer$/;"	s
s_linked_int	SRC/util.h	/^struct s_linked_int$/;"	s
s_linked_rc_edge	SRC/net_delay.c	/^struct s_linked_rc_edge$/;"	s	file:
s_linked_rc_ptr	SRC/net_delay.c	/^struct s_linked_rc_ptr$/;"	s	file:
s_linked_rt_edge	SRC/route_tree_timing.h	/^struct s_linked_rt_edge$/;"	s
s_linked_vptr	SRC/util.h	/^struct s_linked_vptr$/;"	s
s_mst_edge	SRC/mst.h	/^typedef struct s_mst_edge$/;"	s
s_mux	SRC/rr_graph.c	/^typedef struct s_mux$/;"	s	file:
s_mux_size_distribution	SRC/rr_graph.c	/^typedef struct s_mux_size_distribution$/;"	s	file:
s_net	SRC/vpr_types.h	/^struct s_net$/;"	s
s_options	SRC/ReadOptions.h	/^struct s_options$/;"	s
s_place_region	SRC/vpr_types.h	/^struct s_place_region$/;"	s
s_placer_opts	SRC/vpr_types.h	/^struct s_placer_opts$/;"	s
s_rc_node	SRC/net_delay.c	/^struct s_rc_node$/;"	s	file:
s_router_opts	SRC/vpr_types.h	/^struct s_router_opts$/;"	s
s_rr_indexed_data	SRC/vpr_types.h	/^typedef struct s_rr_indexed_data$/;"	s
s_rr_node	SRC/vpr_types.h	/^typedef struct s_rr_node$/;"	s
s_rt_node	SRC/route_tree_timing.h	/^struct s_rt_node$/;"	s
s_seg_details	SRC/vpr_types.h	/^typedef struct s_seg_details$/;"	s
s_segment_inf	SRC/vpr_types.h	/^typedef struct s_segment_inf$/;"	s
s_subblock	SRC/vpr_types.h	/^struct s_subblock$/;"	s
s_subblock_data	SRC/vpr_types.h	/^struct s_subblock_data$/;"	s
s_switch_inf	SRC/vpr_types.h	/^struct s_switch_inf$/;"	s
s_timing_inf	SRC/vpr_types.h	/^typedef struct s_timing_inf$/;"	s
s_trace	SRC/vpr_types.h	/^struct s_trace$/;"	s
s_type_descriptor	SRC/vpr_types.h	/^struct s_type_descriptor$/;"	s
s_type_timing_inf	SRC/vpr_types.h	/^typedef struct s_type_timing_inf$/;"	s
save_region_occ	SRC/place.c	/^save_region_occ(float **old_region_occ_x,$/;"	f	file:
save_routing	SRC/route_common.c	/^save_routing(struct s_trace **best_routing,$/;"	f
saved_base_cost	SRC/vpr_types.h	/^    float saved_base_cost;$/;"	m	struct:s_rr_indexed_data
saved_xleft	SRC/graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
saved_xright	SRC/graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
saved_ybot	SRC/graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
saved_ytop	SRC/graphics.c	/^static float saved_xleft, saved_xright, saved_ytop, saved_ybot;$/;"	v	file:
sb	SRC/vpr_types.h	/^    boolean *sb;$/;"	m	struct:s_seg_details
sb	SRC/vpr_types.h	/^    boolean *sb;$/;"	m	struct:s_segment_inf
sb_len	SRC/vpr_types.h	/^    int sb_len;$/;"	m	struct:s_segment_inf
sched_type	SRC/vpr_types.h	/^enum sched_type$/;"	g
screen_num	SRC/graphics.c	/^static int screen_num;$/;"	v	file:
seed	SRC/vpr_types.h	/^    int seed;$/;"	m	struct:s_placer_opts
seg_index	SRC/vpr_types.h	/^    int seg_index;$/;"	m	struct:s_rr_indexed_data
seg_index_of_cblock	SRC/rr_graph_util.c	/^seg_index_of_cblock(t_rr_type from_rr_type,$/;"	f
seg_index_of_sblock	SRC/rr_graph_util.c	/^seg_index_of_sblock(int from_node,$/;"	f
set_graphics_state	SRC/draw.c	/^set_graphics_state(boolean show_graphics_val,$/;"	f
setcolor	SRC/graphics.c	/^setcolor(int cindex)$/;"	f
setfontsize	SRC/graphics.c	/^setfontsize(int pointsize)$/;"	f
setlinestyle	SRC/graphics.c	/^setlinestyle(int linestyle)$/;"	f
setlinewidth	SRC/graphics.c	/^setlinewidth(int linewidth)$/;"	f
setpoly	SRC/graphics.c	/^setpoly(int bnum,$/;"	f	file:
setup_chan_width	SRC/timing_place_lookup.c	/^setup_chan_width(struct s_router_opts router_opts,$/;"	f	file:
show_congestion	SRC/draw.c	/^static boolean show_congestion = FALSE;$/;"	v	file:
show_graphics	SRC/draw.c	/^static boolean show_graphics;	\/* Graphics enabled or not? *\/$/;"	v	file:
show_nets	SRC/draw.c	/^static boolean show_nets = FALSE;	\/* Show nets of placement or routing? *\/$/;"	v	file:
sibling	SRC/ezxml.h	/^	ezxml_t sibling;	\/* next tag with different name in same section and depth *\/$/;"	m	struct:ezxml
sink_order	SRC/timing_place_lookup.c	/^static int *sink_order;$/;"	v	file:
size	SRC/rr_graph.c	/^    int size;$/;"	m	struct:s_mux	file:
snprintf	SRC/ezxml.c	57;"	d	file:
special_blk	SRC/read_netlist.c	/^enum special_blk$/;"	g	file:
standalone	SRC/ezxml.c	/^    short standalone;		\/* non-zero if <?xml standalone="yes"?> *\/$/;"	m	struct:ezxml_root	file:
start	SRC/vpr_types.h	/^    int start;$/;"	m	struct:s_seg_details
start_col	SRC/vpr_types.h	/^    int start_col;$/;"	m	struct:s_grid_loc_def
start_hash_table_iterator	SRC/hash.c	/^start_hash_table_iterator(void)$/;"	f
start_track	SRC/vpr_types.h	/^    int start_track;		\/* UDSD by AY *\/$/;"	m	struct:s_seg_details
starting_t	SRC/place.c	/^starting_t(float *cost_ptr,$/;"	f	file:
subblock_inf	SRC/vpr_types.h	/^    t_subblock **subblock_inf;$/;"	m	struct:s_subblock_data
switch_block_type	SRC/vpr_types.h	/^    enum e_switch_block_type switch_block_type;$/;"	m	struct:s_det_routing_arch	typeref:enum:s_det_routing_arch::e_switch_block_type
switch_inf	SRC/globals_declare.h	/^struct s_switch_inf *switch_inf;	\/* [0..det_routing_arch.num_switch-1] *\/$/;"	v	typeref:struct:s_switch_inf
switch_inf	SRC/main.c	/^struct s_switch_inf *switch_inf = NULL;	\/* [0..(det_routing_arch.num_switch-1)] *\/$/;"	v	typeref:struct:s_switch_inf
switches	SRC/vpr_types.h	/^    short *switches;$/;"	m	struct:s_rr_node
sync_grid_to_blocks	SRC/vpr_utils.c	/^sync_grid_to_blocks(IN int num_blocks,$/;"	f
sync_nets_to_blocks	SRC/vpr_utils.c	/^sync_nets_to_blocks(IN int num_blocks,$/;"	f
t_T_subblock	SRC/vpr_types.h	/^t_T_subblock;$/;"	t	typeref:struct:s_T_subblock
t_arch	SRC/xml_arch.h	/^typedef struct s_arch t_arch;$/;"	t	typeref:struct:s_arch
t_button	SRC/graphics.c	/^t_button;$/;"	t	typeref:struct:__anon5	file:
t_chan	SRC/vpr_types.h	/^t_chan;$/;"	t	typeref:struct:s_chan
t_chan_width_dist	SRC/vpr_types.h	/^t_chan_width_dist;$/;"	t	typeref:struct:s_chan_width_dist
t_class	SRC/vpr_types.h	/^typedef struct s_class t_class;$/;"	t	typeref:struct:s_class
t_fmap_cell	SRC/place_and_route.h	/^t_fmap_cell;$/;"	t	typeref:struct:s_fmap_cell
t_graph_type	SRC/rr_graph.h	/^typedef enum e_graph_type t_graph_type;$/;"	t	typeref:enum:e_graph_type
t_ivec	SRC/util.h	/^typedef struct s_ivec t_ivec;$/;"	t	typeref:struct:s_ivec
t_linked_edge	SRC/rr_graph_util.h	/^typedef struct s_linked_edge t_linked_edge;$/;"	t	typeref:struct:s_linked_edge
t_linked_int	SRC/util.h	/^typedef struct s_linked_int t_linked_int;$/;"	t	typeref:struct:s_linked_int
t_linked_rc_edge	SRC/net_delay.c	/^typedef struct s_linked_rc_edge t_linked_rc_edge;$/;"	t	typeref:struct:s_linked_rc_edge	file:
t_linked_rc_ptr	SRC/net_delay.c	/^typedef struct s_linked_rc_ptr t_linked_rc_ptr;$/;"	t	typeref:struct:s_linked_rc_ptr	file:
t_linked_rt_edge	SRC/route_tree_timing.h	/^typedef struct s_linked_rt_edge t_linked_rt_edge;$/;"	t	typeref:struct:s_linked_rt_edge
t_mst_edge	SRC/mst.h	/^t_mst_edge;$/;"	t	typeref:struct:s_mst_edge
t_mux	SRC/rr_graph.c	/^t_mux;$/;"	t	typeref:struct:s_mux	file:
t_mux_size_distribution	SRC/rr_graph.c	/^t_mux_size_distribution;$/;"	t	typeref:struct:s_mux_size_distribution	file:
t_options	SRC/ReadOptions.h	/^typedef struct s_options t_options;$/;"	t	typeref:struct:s_options
t_point	SRC/graphics.h	/^t_point;			\/* Used in calls to fillpoly *\/$/;"	t	typeref:struct:__anon2
t_rc_node	SRC/net_delay.c	/^typedef struct s_rc_node t_rc_node;$/;"	t	typeref:struct:s_rc_node	file:
t_rr_indexed_data	SRC/vpr_types.h	/^t_rr_indexed_data;$/;"	t	typeref:struct:s_rr_indexed_data
t_rr_node	SRC/vpr_types.h	/^t_rr_node;$/;"	t	typeref:struct:s_rr_node
t_rr_node_route_inf	SRC/route_common.h	/^t_rr_node_route_inf;$/;"	t	typeref:struct:__anon11
t_rr_type	SRC/vpr_types.h	/^t_rr_type;$/;"	t	typeref:enum:e_rr_type
t_rt_node	SRC/route_tree_timing.h	/^typedef struct s_rt_node t_rt_node;$/;"	t	typeref:struct:s_rt_node
t_seg_details	SRC/vpr_types.h	/^t_seg_details;$/;"	t	typeref:struct:s_seg_details
t_segment_inf	SRC/vpr_types.h	/^t_segment_inf;$/;"	t	typeref:struct:s_segment_inf
t_subblock	SRC/vpr_types.h	/^typedef struct s_subblock t_subblock;$/;"	t	typeref:struct:s_subblock
t_subblock_data	SRC/vpr_types.h	/^typedef struct s_subblock_data t_subblock_data;$/;"	t	typeref:struct:s_subblock_data
t_switch_block_type	SRC/vpr_types.h	/^typedef enum e_switch_block_type t_switch_block_type;$/;"	t	typeref:enum:e_switch_block_type
t_tedge	SRC/path_delay2.h	/^t_tedge;$/;"	t	typeref:struct:__anon6
t_timing_inf	SRC/vpr_types.h	/^t_timing_inf;$/;"	t	typeref:struct:s_timing_inf
t_tnode	SRC/path_delay2.h	/^t_tnode;$/;"	t	typeref:struct:__anon7
t_tnode_descript	SRC/path_delay2.h	/^t_tnode_descript;$/;"	t	typeref:struct:__anon9
t_tnode_type	SRC/path_delay2.h	/^t_tnode_type;$/;"	t	typeref:enum:__anon8
t_type_descriptor	SRC/vpr_types.h	/^typedef struct s_type_descriptor t_type_descriptor;$/;"	t	typeref:struct:s_type_descriptor
t_type_ptr	SRC/vpr_types.h	/^typedef const struct s_type_descriptor *t_type_ptr;$/;"	t	typeref:struct:s_type_descriptor
t_type_timing_inf	SRC/vpr_types.h	/^t_type_timing_inf;$/;"	t	typeref:struct:s_type_timing_inf
target_flag	SRC/route_common.h	/^    short target_flag;$/;"	m	struct:__anon11
td_place_exp_first	SRC/vpr_types.h	/^    float td_place_exp_first;$/;"	m	struct:s_placer_opts
td_place_exp_last	SRC/vpr_types.h	/^    float td_place_exp_last;$/;"	m	struct:s_placer_opts
tedge_ch_bytes_avail	SRC/path_delay.c	/^static int tedge_ch_bytes_avail = 0;$/;"	v	file:
tedge_ch_list_head	SRC/path_delay.c	/^static struct s_linked_vptr *tedge_ch_list_head = NULL;$/;"	v	typeref:struct:s_linked_vptr	file:
tedge_ch_next_avail	SRC/path_delay.c	/^static char *tedge_ch_next_avail = NULL;$/;"	v	file:
temp_net_cost	SRC/place.c	/^static float *net_cost = NULL, *temp_net_cost = NULL;	\/* [0..num_nets-1] *\/$/;"	v	file:
temp_point_to_point_delay_cost	SRC/place.c	/^static float **temp_point_to_point_delay_cost = NULL;$/;"	v	file:
temp_point_to_point_timing_cost	SRC/place.c	/^static float **temp_point_to_point_timing_cost = NULL;$/;"	v	file:
test_if_exposed	SRC/graphics.c	/^test_if_exposed(Display * disp,$/;"	f	file:
text	SRC/graphics.c	/^    char text[BUTTON_TEXT_LEN];$/;"	m	struct:__anon5	file:
textarea	SRC/graphics.c	/^static Window toplevel, menu, textarea;	\/* various windows *\/$/;"	v	file:
tile_width	SRC/draw.c	/^static float tile_width, pin_size;$/;"	v	file:
tile_x	SRC/draw.c	/^static float *tile_x, *tile_y;$/;"	v	file:
tile_y	SRC/draw.c	/^static float *tile_x, *tile_y;$/;"	v	file:
timing_analysis_enabled	SRC/vpr_types.h	/^    boolean timing_analysis_enabled;$/;"	m	struct:s_timing_inf
timing_driven_check_net_delays	SRC/route_timing.c	/^timing_driven_check_net_delays(float **net_delay)$/;"	f	file:
timing_driven_expand_neighbours	SRC/route_timing.c	/^timing_driven_expand_neighbours(struct s_heap *current,$/;"	f	file:
timing_driven_route_net	SRC/route_timing.c	/^timing_driven_route_net(int inet,$/;"	f
timing_place_crit	SRC/timing_place.c	/^float **timing_place_crit;	\/*available externally *\/$/;"	v
timing_place_crit_chunk_list_head	SRC/timing_place.c	/^static struct s_linked_vptr *timing_place_crit_chunk_list_head;$/;"	v	typeref:struct:s_linked_vptr	file:
timing_tradeoff	SRC/vpr_types.h	/^    float timing_tradeoff;$/;"	m	struct:s_placer_opts
tnode	SRC/path_delay2.c	/^t_tnode *tnode;			\/* [0..num_tnodes - 1] *\/$/;"	v
tnode_descript	SRC/path_delay2.c	/^t_tnode_descript *tnode_descript;	\/* [0..num_tnodes - 1] *\/$/;"	v
tnodes_at_level	SRC/path_delay2.c	/^struct s_ivec *tnodes_at_level;$/;"	v	typeref:struct:s_ivec
to_node	SRC/mst.h	/^    unsigned short int to_node;$/;"	m	struct:s_mst_edge
to_node	SRC/path_delay2.h	/^    int to_node;$/;"	m	struct:__anon6
toggle_congestion	SRC/draw.c	/^toggle_congestion(void (*drawscreen_ptr) (void))$/;"	f	file:
toggle_nets	SRC/draw.c	/^toggle_nets(void (*drawscreen_ptr) (void))$/;"	f	file:
toggle_rr	SRC/draw.c	/^toggle_rr(void (*drawscreen_ptr) (void))$/;"	f	file:
top_height	SRC/graphics.c	/^static unsigned int top_width, top_height;	\/* window size *\/$/;"	v	file:
top_width	SRC/graphics.c	/^static unsigned int top_width, top_height;	\/* window size *\/$/;"	v	file:
toplevel	SRC/graphics.c	/^static Window toplevel, menu, textarea;	\/* various windows *\/$/;"	v	file:
trace_free_head	SRC/route_common.c	/^static struct s_trace *trace_free_head = NULL;$/;"	v	typeref:struct:s_trace	file:
trace_head	SRC/globals_declare.h	/^struct s_trace **trace_head, **trace_tail;$/;"	v	typeref:struct:s_trace
trace_head	SRC/main.c	/^struct s_trace **trace_head = NULL;	\/* [0..(num_nets-1)] *\/$/;"	v	typeref:struct:s_trace
trace_tail	SRC/globals_declare.h	/^struct s_trace **trace_head, **trace_tail;$/;"	v	typeref:struct:
trace_tail	SRC/main.c	/^struct s_trace **trace_tail = NULL;	\/* [0..(num_nets-1)] *\/$/;"	v	typeref:struct:s_trace
trans_per_R	SRC/rr_graph_area.c	/^trans_per_R(float Rtrans,$/;"	f	file:
trans_per_buf	SRC/rr_graph_area.c	/^trans_per_buf(float Rbuf,$/;"	f	file:
trans_per_mux	SRC/rr_graph_area.c	/^trans_per_mux(int num_inputs,$/;"	f	file:
translate_down	SRC/graphics.c	/^translate_down(void (*drawscreen) (void))$/;"	f	file:
translate_left	SRC/graphics.c	/^translate_left(void (*drawscreen) (void))$/;"	f	file:
translate_right	SRC/graphics.c	/^translate_right(void (*drawscreen) (void))$/;"	f	file:
translate_up	SRC/graphics.c	/^translate_up(void (*drawscreen) (void))$/;"	f	file:
try_breadth_first_route	SRC/route_breadth_first.c	/^try_breadth_first_route(struct s_router_opts router_opts,$/;"	f
try_directed_search_route	SRC/route_directed_search.c	/^try_directed_search_route(struct s_router_opts router_opts,$/;"	f
try_place	SRC/place.c	/^try_place(struct s_placer_opts placer_opts,$/;"	f
try_route	SRC/route_common.c	/^try_route(int width_fac,$/;"	f
try_swap	SRC/place.c	/^try_swap(float t,$/;"	f	file:
try_timing_driven_route	SRC/route_timing.c	/^try_timing_driven_route(struct s_router_opts router_opts,$/;"	f
turn_on_off	SRC/graphics.c	/^turn_on_off(int pressed)$/;"	f	file:
twisted	SRC/vpr_types.h	/^    boolean twisted;$/;"	m	struct:s_seg_details
txt	SRC/ezxml.h	/^	char *txt;		\/* tag character content, empty string if none *\/$/;"	m	struct:ezxml
type	SRC/path_delay2.h	/^    t_tnode_type type;$/;"	m	struct:__anon9
type	SRC/vpr_types.h	/^    enum e_pin_type type;$/;"	m	struct:s_class	typeref:enum:s_class::e_pin_type
type	SRC/vpr_types.h	/^    enum e_stat type;$/;"	m	struct:s_chan	typeref:enum:s_chan::e_stat
type	SRC/vpr_types.h	/^    enum sched_type type;$/;"	m	struct:s_annealing_sched	typeref:enum:s_annealing_sched::sched_type
type	SRC/vpr_types.h	/^    t_rr_type type;$/;"	m	struct:s_rr_node
type	SRC/vpr_types.h	/^    t_type_ptr type;$/;"	m	struct:s_block
type	SRC/vpr_types.h	/^    t_type_ptr type;$/;"	m	struct:s_grid_tile
type_descriptors	SRC/main.c	/^struct s_type_descriptor *type_descriptors = NULL;$/;"	v	typeref:struct:s_type_descriptor
type_descriptors_backup	SRC/timing_place_lookup.c	/^static t_type_descriptor *type_descriptors_backup;$/;"	v	file:
type_timing_inf	SRC/vpr_types.h	/^    t_type_timing_inf type_timing_inf;$/;"	m	struct:s_type_descriptor
u	SRC/ezxml.c	/^    char *u;			\/* UTF-8 conversion of string if original was UTF-16 *\/$/;"	m	struct:ezxml_root	file:
u	SRC/net_delay.c	/^    u;$/;"	m	struct:s_rc_node	typeref:union:s_rc_node::__anon1	file:
u	SRC/route_common.h	/^    u;$/;"	m	struct:s_heap	typeref:union:s_heap::__anon10
u	SRC/route_tree_timing.h	/^    u;$/;"	m	struct:s_rt_node	typeref:union:s_rt_node::__anon12
unique_pin_list	SRC/place.c	/^static int **unique_pin_list;$/;"	v	file:
unmap_button	SRC/graphics.c	/^unmap_button(int bnum)$/;"	f	file:
update_bb	SRC/place.c	/^update_bb(int inet,$/;"	f	file:
update_message	SRC/graphics.c	/^update_message(char *msg)$/;"	f
update_net_delays_from_route_tree	SRC/route_tree_timing.c	/^update_net_delays_from_route_tree(float *net_delay,$/;"	f
update_ps_transform	SRC/graphics.c	/^update_ps_transform(void)$/;"	f	file:
update_region_occ	SRC/place.c	/^update_region_occ(int inet,$/;"	f	file:
update_rlim	SRC/place.c	/^update_rlim(float *rlim,$/;"	f	file:
update_route_tree	SRC/route_tree_timing.c	/^update_route_tree(struct s_heap * hptr)$/;"	f
update_rr_base_costs	SRC/route_timing.c	/^update_rr_base_costs(int inet,$/;"	f	file:
update_screen	SRC/draw.c	/^update_screen(int priority,$/;"	f
update_t	SRC/place.c	/^update_t(float *t,$/;"	f	file:
update_td_cost	SRC/place.c	/^update_td_cost(int b_from,$/;"	f	file:
update_traceback	SRC/route_common.c	/^update_traceback(struct s_heap *hptr,$/;"	f
update_transform	SRC/graphics.c	/^update_transform(void)$/;"	f	file:
update_unbuffered_ancestors_C_downstream	SRC/route_tree_timing.c	/^update_unbuffered_ancestors_C_downstream(t_rt_node$/;"	f	file:
update_win	SRC/graphics.c	/^update_win(int x[2],$/;"	f	file:
usage	SRC/vpr_types.h	/^    int usage;$/;"	m	struct:s_grid_tile
verify_binary_search	SRC/vpr_types.h	/^	boolean verify_binary_search;$/;"	m	struct:s_router_opts
view_mux_size_distribution	SRC/rr_graph.c	/^view_mux_size_distribution(t_ivec *** rr_node_indices,$/;"	f	file:
vpr_to_phy_track	SRC/rr_graph2.c	/^vpr_to_phy_track(IN int itrack,$/;"	f	file:
watch_edges	SRC/rr_graph.c	/^watch_edges(int inode,$/;"	f
which_button	SRC/graphics.c	/^which_button(Window win)$/;"	f	file:
width	SRC/graphics.c	/^    int width;$/;"	m	struct:__anon5	file:
width	SRC/vpr_types.h	/^    float width;$/;"	m	struct:s_chan
win	SRC/graphics.c	/^    Window win;$/;"	m	struct:__anon5	file:
wire_switch	SRC/vpr_types.h	/^    short wire_switch;$/;"	m	struct:s_seg_details
wire_switch	SRC/vpr_types.h	/^    short wire_switch;$/;"	m	struct:s_segment_inf
wire_to_ipin_switch	SRC/vpr_types.h	/^    short wire_to_ipin_switch;$/;"	m	struct:s_det_routing_arch
wirelength	SRC/place_and_route.h	/^    int wirelength;		\/* corresponding wirelength of successful routing at wneed *\/$/;"	m	struct:s_fmap_cell
wneed	SRC/place_and_route.h	/^    int wneed;			\/* need wneed to route *\/$/;"	m	struct:s_fmap_cell
write	SRC/ezxml.c	60;"	d	file:
x	SRC/graphics.h	/^    float x;$/;"	m	struct:__anon2
x	SRC/vpr_types.h	/^    int x;$/;"	m	struct:s_block
xcoord	SRC/graphics.c	/^xcoord(float worldx)$/;"	f	file:
xhigh	SRC/vpr_types.h	/^    short xhigh;$/;"	m	struct:s_rr_node
xleft	SRC/graphics.c	/^    int xleft;$/;"	m	struct:__anon5	file:
xleft	SRC/graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
xlow	SRC/vpr_types.h	/^    short xlow;$/;"	m	struct:s_rr_node
xmax	SRC/vpr_types.h	/^    int xmax;$/;"	m	struct:s_bb
xmin	SRC/vpr_types.h	/^    int xmin;$/;"	m	struct:s_bb
xml	SRC/ezxml.c	/^    struct ezxml xml;		\/* is a super-struct built on top of ezxml struct *\/$/;"	m	struct:ezxml_root	typeref:struct:ezxml_root::ezxml	file:
xmult	SRC/graphics.c	/^static float xmult, ymult;	\/* Transformation factors *\/$/;"	v	file:
xpeak	SRC/vpr_types.h	/^    float xpeak;$/;"	m	struct:s_chan
xright	SRC/graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
y	SRC/graphics.h	/^    float y;$/;"	m	struct:__anon2
y	SRC/vpr_types.h	/^    int y;$/;"	m	struct:s_block
ybot	SRC/graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
ycoord	SRC/graphics.c	/^ycoord(float worldy)$/;"	f	file:
yhigh	SRC/vpr_types.h	/^    short yhigh;$/;"	m	struct:s_rr_node
ylow	SRC/vpr_types.h	/^    short ylow;$/;"	m	struct:s_rr_node
ymax	SRC/vpr_types.h	/^    int ymax;$/;"	m	struct:s_bb
ymin	SRC/vpr_types.h	/^    int ymin;$/;"	m	struct:s_bb
ymult	SRC/graphics.c	/^static float xmult, ymult;	\/* Transformation factors *\/$/;"	v	file:
ytop	SRC/graphics.c	/^    int ytop;$/;"	m	struct:__anon5	file:
ytop	SRC/graphics.c	/^static float xleft, xright, ytop, ybot;	\/* world coordinates *\/$/;"	v	file:
z	SRC/vpr_types.h	/^    int z;$/;"	m	struct:s_block
zoom_fit	SRC/graphics.c	/^zoom_fit(void (*drawscreen) (void))$/;"	f	file:
zoom_in	SRC/graphics.c	/^zoom_in(void (*drawscreen) (void))$/;"	f	file:
zoom_out	SRC/graphics.c	/^zoom_out(void (*drawscreen) (void))$/;"	f	file:
